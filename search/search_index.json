{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The Click to Containerize family encompasses a number of tools that provide customers with the ability to quickly modernize their Db2 landscape. The Db2 Shift utility is part of the Click to Containerize family and can be used to clone a copy of Db2 into an OpenShift, Kubernetes, Cloud Pak for Data (CP4D), or a standard Db2 instance. The utility is intended to help customers clone their existing Db2 databases into a containerized environment with the minimum amount of effort. Some benefits of Db2 Click to Containerize are: Automated, fast, and secure cloning of Linux databases to Hybrid Cloud Massively reduces time to containerize database workloads Enables alignment with Agile Delivery and Project Lifecycle with additional cloning capabilities once in cloud Features of Db2 Click to Containerize include: The ability to clone a database without the need to unload, export, de-crypt, or backup the database Automatic upgrades from Db2 Version 10.5 to the latest version (11.5.7) of Db2 Cloning of all database settings and objects, including external functions located in the Db2 library path Row, Columnar, and Encrypted databases can be cloned OLTP, SMP, and MPP databases can be cloned (excluding pureScale installations at this time) Easy setup of HADR servers for staged migration The Db2 Click to Containerize utility allows a customer to clone their current databases to one of four platforms: OpenShift cluster Kubernetes cluster Cloud Pak for Data Another Db2 instance on premise, on Cloud, or in a Virtual Environment In addition to directly cloning the database from one location to another, the Db2 Click to Containerize utility can clone a database for future deployment. This feature is useful for environments where the target server is air-gapped, or unavailable for direct connection from the source server. Finally, the utility has two modes of operation. For expert users, the clone command can be issued with the appropriate options and run directly from a command line or a script. For those users who require more help, the program can also be run in an interactive mode, with detailed instructions and help for the various cloning scenarios. In summary, Db2 Shift provides the ability to quickly, and easily, clone your Db2 Linux database into a containerized environment with a minimal amount of time and effort.","title":"Introduction"},{"location":"#introduction","text":"The Click to Containerize family encompasses a number of tools that provide customers with the ability to quickly modernize their Db2 landscape. The Db2 Shift utility is part of the Click to Containerize family and can be used to clone a copy of Db2 into an OpenShift, Kubernetes, Cloud Pak for Data (CP4D), or a standard Db2 instance. The utility is intended to help customers clone their existing Db2 databases into a containerized environment with the minimum amount of effort. Some benefits of Db2 Click to Containerize are: Automated, fast, and secure cloning of Linux databases to Hybrid Cloud Massively reduces time to containerize database workloads Enables alignment with Agile Delivery and Project Lifecycle with additional cloning capabilities once in cloud Features of Db2 Click to Containerize include: The ability to clone a database without the need to unload, export, de-crypt, or backup the database Automatic upgrades from Db2 Version 10.5 to the latest version (11.5.7) of Db2 Cloning of all database settings and objects, including external functions located in the Db2 library path Row, Columnar, and Encrypted databases can be cloned OLTP, SMP, and MPP databases can be cloned (excluding pureScale installations at this time) Easy setup of HADR servers for staged migration The Db2 Click to Containerize utility allows a customer to clone their current databases to one of four platforms: OpenShift cluster Kubernetes cluster Cloud Pak for Data Another Db2 instance on premise, on Cloud, or in a Virtual Environment In addition to directly cloning the database from one location to another, the Db2 Click to Containerize utility can clone a database for future deployment. This feature is useful for environments where the target server is air-gapped, or unavailable for direct connection from the source server. Finally, the utility has two modes of operation. For expert users, the clone command can be issued with the appropriate options and run directly from a command line or a script. For those users who require more help, the program can also be run in an interactive mode, with detailed instructions and help for the various cloning scenarios. In summary, Db2 Shift provides the ability to quickly, and easily, clone your Db2 Linux database into a containerized environment with a minimal amount of time and effort.","title":"Introduction"},{"location":"bestpractices/","text":"Best Practices There are several best practices that we recommend when using the Db2 Shift utility. Many of these recommendations are evolving and updates will be added to this document on a regular basis. Database Migration The Db2 Shift command will migrate a database from Version 10.5 and 11.1 to the latest version of Db2 (11.5). Databases that are at older release levels will need to be migrated to 10.5 or 11.1 before using the Db2 Shift utility. When performing a Db2 Shift on an older release, the database must be shut down or DEACTIVATED before a shift can be performed. All Db2 upgrades require that the database be in a fully consistent state for the upgrade to take place. The utility will fail if the database was in a WRITE SUSPEND state. If the Db2 Shift utility is run against a database which requires migration, it will check to see if --offline or --online was supplied in the command line or in the user interface. If --offline was set, the Db2 Shift utility will shift the files assuming the database is offline. If the database was not offline, the upgrade at the target will fail because the control information in the database files will not be consistent. If --online was selected, and a migration is required, Db2 will force the database into a DEACTIVATED state. This will cause a database outage and potentially rollback transactions that were in progress. Make sure that the database does not have any workloads running against it if you decide to shift when using the --online mode. Note that having a database in DEACTIVATED state is not a guarantee that no one can connect to the database. The other option to reduce outage time for a database is to use the clone option. A clone copy can be used for an upgrade and the database can be write suspended when using this mode of operation. In summary, when shifting a database that needs an upgrade, using one of the following techniques: Shut down the database and use the --offline flag Use the --online flag and let Db2 DEACTIVATE the database Clone the database (and deploy later) using the --online flag \u2003 Online Versus Offline Mode Db2 Shift provides two options when dealing with the state of a database during the shift process: --online mode - the database is online while the shift is taking place --offline mode - the database has been shutdown Online Mode Online mode is the default value for all shifts. While this can be used for shifting databases that require an upgrade, the recommendation is to use --offline mode instead. When shifting a database in --online mode, the file copy step will not affect the status of the database. Workloads can continue to run while the copying is taking place. Note that the buffer pools may be affected by the reading process so there may be lower cache utilization while the utility is running. During the last step of the shift process, Db2 Shift will search for any updates that may have been applied to the database after the initial copying was done. To ensure the integrity of the data being copied, the database will be placed into a WRITE SUSPEND mode. This last step should only take a few seconds and the database will be WRITE RESUMED when the final copy is done. When the database is suspended, all read activities will continue. New connections will not be permitted, but any applications that are currently running will be allowed to continue. Those transactions that are updating records will be temporarily \"paused\" while the copying is done. Once the copy is complete, a suspended application will finish their transaction. Online mode provides the least disruption to an active database but is not recommended for databases that being upgrade. Offline Mode Offline mode should be used for database migrations. If it is not used, the Db2 Shift utility will DEACTIVATE the database before continuing. Offline mode indicates to Db2 Shift that the database has either been DEACTIVATED or the instance has been shut down. If you want to use offline mode, you must first gather the control information while the database is online. To do this, either through the command, or the UI, select --blank-slate=true --verify . The --blank-slate=true option will gather the source and target control information that is required to do a shift. If the source database was already offline, this information would not available. Adding the --verify option will check that all the settings are correct between the source and target and stop execution (i.e., the shift will not occur). After your shut down the source database you would use the option --blank-slate=false . This will force Db2 Shift to use the existing control information that you generated in the previous step. At this point the database will be a consistent state and the upgrade step will proceed at the target location. Instance Ownership If you are moving a database that was created with an instance owner that is not found on the target system, you must make sure to add the instance owner at the target into the current database before shifting the database. Example: Database CQW was created by instance owner db2inst2 . This database is then cloned to another instance that has db2inst1 as the instance owner. When db2inst1 attempts to access the database, they will be unable to manage it because they do not have DBADM or SECADM privileges on the tables created by db2inst2 . There are two ways to solve this. One is to create the userid db2inst2 at the destination location for a traditional instance. You would then be able to connect to the database as db2inst2 and grant DBADM and SECADM back to db2inst1 . However, this approach will not work with Db2U and CP4D installations because there is no mechanism available within the POD to create a new OS-level userid. The second (and easier) method is to add the destination instance owner to the source database. GRANT SECADM ON DATABASE TO USER db2inst1 GRANT DBADM ON DATABASE TO USER db2inst1 The db2inst1 userid does not need to exist in the Operating system to grant these privileges to the userid. Once the database is shifted to the new location, the instance owner db2inst1 will have full access to the database. Threads and Compression One area that is still evolving is the use of threads and compression when shifting a database into a cloud environment. The Db2 Shift tool has been set to use default settings that give the best performance in networks that have 1Gb/s throughput. These settings will need to be adjusted based on your network and machine characteristics. The following are some general observations from early testing. Threads Using a higher number of threads is useful in situations where the Db2 database has multiple paths defined for a storage group. If the database was created with a single storage path, the threads are competing for I/O on the same device. Increasing the number of threads will not necessarily result in more throughput. Testing has shown that 4 threads is a good starting point for parallelism, with small incremental benefits as you increase the number. You need to balance the CPU usage by the Shift utility and the impact on workloads running on the server. If the Db2 Shift command is being used for gradual shifts (initial, refresh), the number of threads should be set to 1 to reduce the overhead on the server. Once the final shift is run you may want to increase the value to minimize the suspend time of the database. If there is no contention on the server then the maximum thread count should be 1 less than the number of VPCs of the server or 8, whichever is less. For a cloud instance that is defined with 4 cores, 8 VPCs (SMTx2), the thread count should be a maximum of 7 (8 VPCs - 1). For larger servers, a maximum of 8 threads can be used. \u2003 Test Scenario The Db2 Shift command was run from a standard Db2 on Linux instance and shifting the database to a Kubernetes cluster with Db2U installed. The database size was approximately 50Gb with 260+M rows of transactional data. The best elapsed time was 237 seconds (131s copy time only). Increasing the number of threads did not make a difference to the total elapsed time. Examining the CPU usage, the average utilization of the threads was almost identical between 4 and 8 threads. The network throughput appears to track with the CPU usage, demonstrating that the CPUs are busy transmitting as much data onto the network as possible. The results showed that the maximum throughput was capped by the network limit of 5Gb/s. The network throughput was: 1 thread was 1240 Mb/sec 4 threads were 4890 Mb/sec A CPU thread has a limit on how much data it can push onto the network. By running a test on a single thread, you can determine how many cores you can effectively use during a Shift run. Dividing the network capacity by the single core performance will determine the optimal number of threads to use. Example: Throughput of one thread is approximately 1.2Gb/s Network limit is 5Gb/s 5/1.2 is approximately 4 threads This result can also be used to determine your total copy time: Database Size/(Network Limit/8) = elapsed time 50 GB/(5Gbs/8) = 50GB/(.625GBs) = 80s with ideal conditions Tests results were 50GB/(4.89Gbs/8) = 128s ideal (131 observed) Note : These test results were run in a laboratory environment with ideal conditions and may not be applicable to your installation. You are advised to test the throughput on your own system to determine the performance of the Db2 Shift utility. Compression Compression will significantly reduce throughput if you are CPU constrained. If the database is encrypted, uses compression, or has a high ratio of numeric values over character values, adding compression will not help throughput. In some cases, this may significantly reduce throughput. The recommendation is to use compression only if you have a very slow network (<1Gbps). For these types of situations, the compression may result in less data being transferred which will reduce the load on the network. Aside from this situation, leaving compression at 0 is the best strategy for initial Db2 Shift tests.","title":"Best Practices"},{"location":"bestpractices/#best-practices","text":"There are several best practices that we recommend when using the Db2 Shift utility. Many of these recommendations are evolving and updates will be added to this document on a regular basis.","title":"Best Practices"},{"location":"bestpractices/#database-migration","text":"The Db2 Shift command will migrate a database from Version 10.5 and 11.1 to the latest version of Db2 (11.5). Databases that are at older release levels will need to be migrated to 10.5 or 11.1 before using the Db2 Shift utility. When performing a Db2 Shift on an older release, the database must be shut down or DEACTIVATED before a shift can be performed. All Db2 upgrades require that the database be in a fully consistent state for the upgrade to take place. The utility will fail if the database was in a WRITE SUSPEND state. If the Db2 Shift utility is run against a database which requires migration, it will check to see if --offline or --online was supplied in the command line or in the user interface. If --offline was set, the Db2 Shift utility will shift the files assuming the database is offline. If the database was not offline, the upgrade at the target will fail because the control information in the database files will not be consistent. If --online was selected, and a migration is required, Db2 will force the database into a DEACTIVATED state. This will cause a database outage and potentially rollback transactions that were in progress. Make sure that the database does not have any workloads running against it if you decide to shift when using the --online mode. Note that having a database in DEACTIVATED state is not a guarantee that no one can connect to the database. The other option to reduce outage time for a database is to use the clone option. A clone copy can be used for an upgrade and the database can be write suspended when using this mode of operation. In summary, when shifting a database that needs an upgrade, using one of the following techniques: Shut down the database and use the --offline flag Use the --online flag and let Db2 DEACTIVATE the database Clone the database (and deploy later) using the --online flag","title":"Database Migration"},{"location":"bestpractices/#online-versus-offline-mode","text":"Db2 Shift provides two options when dealing with the state of a database during the shift process: --online mode - the database is online while the shift is taking place --offline mode - the database has been shutdown","title":"Online Versus Offline Mode"},{"location":"bestpractices/#online-mode","text":"Online mode is the default value for all shifts. While this can be used for shifting databases that require an upgrade, the recommendation is to use --offline mode instead. When shifting a database in --online mode, the file copy step will not affect the status of the database. Workloads can continue to run while the copying is taking place. Note that the buffer pools may be affected by the reading process so there may be lower cache utilization while the utility is running. During the last step of the shift process, Db2 Shift will search for any updates that may have been applied to the database after the initial copying was done. To ensure the integrity of the data being copied, the database will be placed into a WRITE SUSPEND mode. This last step should only take a few seconds and the database will be WRITE RESUMED when the final copy is done. When the database is suspended, all read activities will continue. New connections will not be permitted, but any applications that are currently running will be allowed to continue. Those transactions that are updating records will be temporarily \"paused\" while the copying is done. Once the copy is complete, a suspended application will finish their transaction. Online mode provides the least disruption to an active database but is not recommended for databases that being upgrade.","title":"Online Mode"},{"location":"bestpractices/#offline-mode","text":"Offline mode should be used for database migrations. If it is not used, the Db2 Shift utility will DEACTIVATE the database before continuing. Offline mode indicates to Db2 Shift that the database has either been DEACTIVATED or the instance has been shut down. If you want to use offline mode, you must first gather the control information while the database is online. To do this, either through the command, or the UI, select --blank-slate=true --verify . The --blank-slate=true option will gather the source and target control information that is required to do a shift. If the source database was already offline, this information would not available. Adding the --verify option will check that all the settings are correct between the source and target and stop execution (i.e., the shift will not occur). After your shut down the source database you would use the option --blank-slate=false . This will force Db2 Shift to use the existing control information that you generated in the previous step. At this point the database will be a consistent state and the upgrade step will proceed at the target location.","title":"Offline Mode"},{"location":"bestpractices/#instance-ownership","text":"If you are moving a database that was created with an instance owner that is not found on the target system, you must make sure to add the instance owner at the target into the current database before shifting the database. Example: Database CQW was created by instance owner db2inst2 . This database is then cloned to another instance that has db2inst1 as the instance owner. When db2inst1 attempts to access the database, they will be unable to manage it because they do not have DBADM or SECADM privileges on the tables created by db2inst2 . There are two ways to solve this. One is to create the userid db2inst2 at the destination location for a traditional instance. You would then be able to connect to the database as db2inst2 and grant DBADM and SECADM back to db2inst1 . However, this approach will not work with Db2U and CP4D installations because there is no mechanism available within the POD to create a new OS-level userid. The second (and easier) method is to add the destination instance owner to the source database. GRANT SECADM ON DATABASE TO USER db2inst1 GRANT DBADM ON DATABASE TO USER db2inst1 The db2inst1 userid does not need to exist in the Operating system to grant these privileges to the userid. Once the database is shifted to the new location, the instance owner db2inst1 will have full access to the database.","title":"Instance Ownership"},{"location":"bestpractices/#threads-and-compression","text":"One area that is still evolving is the use of threads and compression when shifting a database into a cloud environment. The Db2 Shift tool has been set to use default settings that give the best performance in networks that have 1Gb/s throughput. These settings will need to be adjusted based on your network and machine characteristics. The following are some general observations from early testing.","title":"Threads and Compression"},{"location":"bestpractices/#threads","text":"Using a higher number of threads is useful in situations where the Db2 database has multiple paths defined for a storage group. If the database was created with a single storage path, the threads are competing for I/O on the same device. Increasing the number of threads will not necessarily result in more throughput. Testing has shown that 4 threads is a good starting point for parallelism, with small incremental benefits as you increase the number. You need to balance the CPU usage by the Shift utility and the impact on workloads running on the server. If the Db2 Shift command is being used for gradual shifts (initial, refresh), the number of threads should be set to 1 to reduce the overhead on the server. Once the final shift is run you may want to increase the value to minimize the suspend time of the database. If there is no contention on the server then the maximum thread count should be 1 less than the number of VPCs of the server or 8, whichever is less. For a cloud instance that is defined with 4 cores, 8 VPCs (SMTx2), the thread count should be a maximum of 7 (8 VPCs - 1). For larger servers, a maximum of 8 threads can be used.","title":"Threads"},{"location":"bestpractices/#test-scenario","text":"The Db2 Shift command was run from a standard Db2 on Linux instance and shifting the database to a Kubernetes cluster with Db2U installed. The database size was approximately 50Gb with 260+M rows of transactional data. The best elapsed time was 237 seconds (131s copy time only). Increasing the number of threads did not make a difference to the total elapsed time. Examining the CPU usage, the average utilization of the threads was almost identical between 4 and 8 threads. The network throughput appears to track with the CPU usage, demonstrating that the CPUs are busy transmitting as much data onto the network as possible. The results showed that the maximum throughput was capped by the network limit of 5Gb/s. The network throughput was: 1 thread was 1240 Mb/sec 4 threads were 4890 Mb/sec A CPU thread has a limit on how much data it can push onto the network. By running a test on a single thread, you can determine how many cores you can effectively use during a Shift run. Dividing the network capacity by the single core performance will determine the optimal number of threads to use. Example: Throughput of one thread is approximately 1.2Gb/s Network limit is 5Gb/s 5/1.2 is approximately 4 threads This result can also be used to determine your total copy time: Database Size/(Network Limit/8) = elapsed time 50 GB/(5Gbs/8) = 50GB/(.625GBs) = 80s with ideal conditions Tests results were 50GB/(4.89Gbs/8) = 128s ideal (131 observed) Note : These test results were run in a laboratory environment with ideal conditions and may not be applicable to your installation. You are advised to test the throughput on your own system to determine the performance of the Db2 Shift utility.","title":"Test Scenario"},{"location":"bestpractices/#compression","text":"Compression will significantly reduce throughput if you are CPU constrained. If the database is encrypted, uses compression, or has a high ratio of numeric values over character values, adding compression will not help throughput. In some cases, this may significantly reduce throughput. The recommendation is to use compression only if you have a very slow network (<1Gbps). For these types of situations, the compression may result in less data being transferred which will reduce the load on the network. Aside from this situation, leaving compression at 0 is the best strategy for initial Db2 Shift tests.","title":"Compression"},{"location":"clone/","text":"Clone a Database The Db2 Shift clone option is used to take an existing Db2 database that is currently on-premise, and clone it into a directory. This cloned database can then be transported to another server and be deployed at that location. The advantage of cloning is that the destination does not need to be connected to the source location and the deployment of the clone can be done at a more convenient time. The Db2 Shift program requires the following information: Source Database details Clone Options The destination details are not required to clone a database. The syntax for creating a cloned database is: db2shift Required Options --mode=clone --source-dbname=flights --source-owner=db2inst1 --clone-dir=/tmp/cache Optional Settings --online or --offline --threads=4 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability: Mode Option (Command Line Only) Syntax: --mode=clone The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The CLONE option can be used to create a copy of database to be moved to another location and then deployed. This feature is useful in situations where the target system cannot be reached through the network due to firewall issues. Settings Database Name (Source) Instance Owner Clone Directory Metadata Synchronization Options Exclude Routines Database Mode Thread Count","title":"Clone a Database"},{"location":"clone/#clone-a-database","text":"The Db2 Shift clone option is used to take an existing Db2 database that is currently on-premise, and clone it into a directory. This cloned database can then be transported to another server and be deployed at that location. The advantage of cloning is that the destination does not need to be connected to the source location and the deployment of the clone can be done at a more convenient time. The Db2 Shift program requires the following information: Source Database details Clone Options The destination details are not required to clone a database. The syntax for creating a cloned database is: db2shift Required Options --mode=clone --source-dbname=flights --source-owner=db2inst1 --clone-dir=/tmp/cache Optional Settings --online or --offline --threads=4 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability:","title":"Clone a Database"},{"location":"clone/#mode-option-command-line-only","text":"Syntax: --mode=clone The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The CLONE option can be used to create a copy of database to be moved to another location and then deployed. This feature is useful in situations where the target system cannot be reached through the network due to firewall issues.","title":"Mode Option (Command Line Only)"},{"location":"clone/#settings","text":"Database Name (Source) Instance Owner Clone Directory Metadata Synchronization Options Exclude Routines Database Mode Thread Count","title":"Settings"},{"location":"clonecopy/","text":"Clone Copy This Db2 Shift command provides a feature that allows a user to copy an existing database clone copy to a POD, or to retrieve a database clone from a POD. Once a database clone has been generated, the copy can be moved to any location and then deployed locally. This option provides a convenient way of copying the database using Db2 Shift without having to use OpenShift or Kubernetes commands. The panel requires the following information: Type of copy (From Source to Target or Target to Source) Source cloned database directory Target cloned database directory The destination POD and server details The syntax for copying a cloned database to a POD: db2shift Required Options --mode=push_clone (Source to Target) --mode=pull_clone (Target to Source) --dest-type=POD --oc or --kubectl --dest-server=c-demo-db2u-0 --local-dir=/tmp/cache --dest-dir=/tmp/cache Optional Settings --dest-namespace=db2u The panel that provides this capability: Mode Option (Command Line Only) Syntax: --mode=push_clone , --mode=pull_clone The Db2 Shift will copy a cloned database to a pod, or retrieve the contents of a cloned database back to the local instance. Destination Type (Command Line Only) Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI. Settings (Command Line and UI) Source Clone Directory Target Clone Directory Target Client (Instance to Pod) Destination Server (Pod) Destination Pod Namespace or Project","title":"Clone Copying"},{"location":"clonecopy/#clone-copy","text":"This Db2 Shift command provides a feature that allows a user to copy an existing database clone copy to a POD, or to retrieve a database clone from a POD. Once a database clone has been generated, the copy can be moved to any location and then deployed locally. This option provides a convenient way of copying the database using Db2 Shift without having to use OpenShift or Kubernetes commands. The panel requires the following information: Type of copy (From Source to Target or Target to Source) Source cloned database directory Target cloned database directory The destination POD and server details The syntax for copying a cloned database to a POD: db2shift Required Options --mode=push_clone (Source to Target) --mode=pull_clone (Target to Source) --dest-type=POD --oc or --kubectl --dest-server=c-demo-db2u-0 --local-dir=/tmp/cache --dest-dir=/tmp/cache Optional Settings --dest-namespace=db2u The panel that provides this capability:","title":"Clone Copy"},{"location":"clonecopy/#mode-option-command-line-only","text":"Syntax: --mode=push_clone , --mode=pull_clone The Db2 Shift will copy a cloned database to a pod, or retrieve the contents of a cloned database back to the local instance.","title":"Mode Option (Command Line Only)"},{"location":"clonecopy/#destination-type-command-line-only","text":"Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI.","title":"Destination Type (Command Line Only)"},{"location":"clonecopy/#settings-command-line-and-ui","text":"Source Clone Directory Target Clone Directory Target Client (Instance to Pod) Destination Server (Pod) Destination Pod Namespace or Project","title":"Settings (Command Line and UI)"},{"location":"deployinstance/","text":"Clone Deployment to another Db2 Instance This Db2 Shift option will take a database clone and deploy it into another Db2 instance running natively (in any environment including Cloud VMs). The panel requires the following information: Database name and clone location Destination instance details Shift Options The syntax for deploying a clone to another Db2 INSTANCE is: db2shift Required Options --mode=apply_clone --dest-type=OTHER --ssh or --local --source-dbname=flights --source-owner=db2inst1 --clone-dir=/tmp/cache --dest-dbname=db2oltp --dest-owner=db2inst1 --dest-server=db2inst1@some.server.com Optional Settings --hadr --online or --offline --threads=4 --compress-level=0 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability: Mode Option (Command Line Only) Syntax: --mode=apply_clone The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The APPLY_CLONE option will take an existing CLONEd database and shift it to a POD or a Db2 instance. There is no need to be connected to the original database because all of the control information is contained within the CLONEs image. Destination Type (Command Line Only) Syntax --dest-type=OTHER The destination is another instance (OTHER). This setting is only required when using the command line. It is automatically generated by the UI. Settings (Command Line and UI) Database Name (Source) Instance Owner Clone Directory Target Location (Instance) Database Name (Destination) Force Destination Database Creation Destination Owner Server Address Metadata HADR Option Exclude Routines Thread Count Compression Overrides","title":"Deploy a Clone to an Instance"},{"location":"deployinstance/#clone-deployment-to-another-db2-instance","text":"This Db2 Shift option will take a database clone and deploy it into another Db2 instance running natively (in any environment including Cloud VMs). The panel requires the following information: Database name and clone location Destination instance details Shift Options The syntax for deploying a clone to another Db2 INSTANCE is: db2shift Required Options --mode=apply_clone --dest-type=OTHER --ssh or --local --source-dbname=flights --source-owner=db2inst1 --clone-dir=/tmp/cache --dest-dbname=db2oltp --dest-owner=db2inst1 --dest-server=db2inst1@some.server.com Optional Settings --hadr --online or --offline --threads=4 --compress-level=0 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability:","title":"Clone Deployment to another Db2 Instance"},{"location":"deployinstance/#mode-option-command-line-only","text":"Syntax: --mode=apply_clone The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The APPLY_CLONE option will take an existing CLONEd database and shift it to a POD or a Db2 instance. There is no need to be connected to the original database because all of the control information is contained within the CLONEs image.","title":"Mode Option (Command Line Only)"},{"location":"deployinstance/#destination-type-command-line-only","text":"Syntax --dest-type=OTHER The destination is another instance (OTHER). This setting is only required when using the command line. It is automatically generated by the UI.","title":"Destination Type (Command Line Only)"},{"location":"deployinstance/#settings-command-line-and-ui","text":"Database Name (Source) Instance Owner Clone Directory Target Location (Instance) Database Name (Destination) Force Destination Database Creation Destination Owner Server Address Metadata HADR Option Exclude Routines Thread Count Compression Overrides","title":"Settings (Command Line and UI)"},{"location":"deploypod/","text":"Clone Deployment to OpenShift, Kubernetes, or CP4D This Db2 Shift option will take a database clone and deploy it into a Db2u pod running on OpenShift, Kubernetes or CP4D. The panel requires the following information: Database name and clone location Destination POD details Type of Containerization environment Shift Options The syntax for deploying a clone to a POD is: db2shift Required Options --mode=apply_clone --dest-type=POD --oc or --kubectl or --local --source-dbname=flights --source-owner=db2inst1 --clone-dir=/tmp/cache --dest-dbname=db2oltp --dest-server=c-demo-db2u-0 Optional Settings --dest-namespace=db2u --hadr --online or --offline --threads=4 --compress-level=0 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability: Mode Option (Command Line Only) Syntax: --mode=apply_clone The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The APPLY_CLONE option will take an existing CLONEd database and shift it to a POD or a Db2 instance. There is no need to be connected to the original database because all of the control information is contained within the CLONEs image. Destination Type (Command Line Only) Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI. Settings (Command Line and UI) Database Name (Source) Instance Owner Clone Directory Target Location (Pod) Database Name (Destination) POD Project POD Name Metadata HADR Option Exclude Routines Thread Count Compression Overrides","title":"Deploy a Clone to a Pod"},{"location":"deploypod/#clone-deployment-to-openshift-kubernetes-or-cp4d","text":"This Db2 Shift option will take a database clone and deploy it into a Db2u pod running on OpenShift, Kubernetes or CP4D. The panel requires the following information: Database name and clone location Destination POD details Type of Containerization environment Shift Options The syntax for deploying a clone to a POD is: db2shift Required Options --mode=apply_clone --dest-type=POD --oc or --kubectl or --local --source-dbname=flights --source-owner=db2inst1 --clone-dir=/tmp/cache --dest-dbname=db2oltp --dest-server=c-demo-db2u-0 Optional Settings --dest-namespace=db2u --hadr --online or --offline --threads=4 --compress-level=0 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability:","title":"Clone Deployment to OpenShift, Kubernetes, or CP4D"},{"location":"deploypod/#mode-option-command-line-only","text":"Syntax: --mode=apply_clone The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The APPLY_CLONE option will take an existing CLONEd database and shift it to a POD or a Db2 instance. There is no need to be connected to the original database because all of the control information is contained within the CLONEs image.","title":"Mode Option (Command Line Only)"},{"location":"deploypod/#destination-type-command-line-only","text":"Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI.","title":"Destination Type (Command Line Only)"},{"location":"deploypod/#settings-command-line-and-ui","text":"Database Name (Source) Instance Owner Clone Directory Target Location (Pod) Database Name (Destination) POD Project POD Name Metadata HADR Option Exclude Routines Thread Count Compression Overrides","title":"Settings (Command Line and UI)"},{"location":"disclaimer/","text":"Disclaimer This software is provided \"as is,\" with no warranties or guarantees whatsoever. IBM expressly disclaims to the fullest extent permitted by law all express, implied, statutory, and other warranties, guarantees, or representations, including, without limitation, the warranties of merchantability, fitness for a particular purpose, and non-infringement of proprietary and intellectual property rights. Without limitation, IBM makes no warranty or guarantee that this application will be secure or error-free. Use of Data The data used within this program is used only for the purposes of shifting databases between different environments. None of the control data used within the application will be kept or transmitted to another location. Data collected for the purposes of using this application will only access configuration information and will not access user data. Use of Personal Data Clients are responsible for ensuring their own compliance with various laws and regulations, including the European Union General Data Protection Regulation. Clients are solely responsible for obtaining advice of competent legal counsel as to the identification and interpretation of any relevant laws and regulations that may affect the clients' business and any actions the clients may need to take to comply with such laws and regulations. Use of this system is at your sole risk.","title":"Disclaimer"},{"location":"disclaimer/#disclaimer","text":"This software is provided \"as is,\" with no warranties or guarantees whatsoever. IBM expressly disclaims to the fullest extent permitted by law all express, implied, statutory, and other warranties, guarantees, or representations, including, without limitation, the warranties of merchantability, fitness for a particular purpose, and non-infringement of proprietary and intellectual property rights. Without limitation, IBM makes no warranty or guarantee that this application will be secure or error-free.","title":"Disclaimer"},{"location":"disclaimer/#use-of-data","text":"The data used within this program is used only for the purposes of shifting databases between different environments. None of the control data used within the application will be kept or transmitted to another location. Data collected for the purposes of using this application will only access configuration information and will not access user data.","title":"Use of Data"},{"location":"disclaimer/#use-of-personal-data","text":"Clients are responsible for ensuring their own compliance with various laws and regulations, including the European Union General Data Protection Regulation. Clients are solely responsible for obtaining advice of competent legal counsel as to the identification and interpretation of any relevant laws and regulations that may affect the clients' business and any actions the clients may need to take to comply with such laws and regulations. Use of this system is at your sole risk.","title":"Use of Personal Data"},{"location":"gui/","text":"Db2 Shift User Interface Db2 Shift can be run either as a command line utility, or as an application with a menu system. The Db2 Shift menu system provides an easy-to-use interface for generating the appropriate shift commands, and includes extensive help on the various parameters that need to be supplied. This section will discuss the user-interface in detail and describe the additional features that are only found in the UI including: The ability to check the source and destinations to determine whether they are compatible View errors logs for diagnosing problems Ability to save commands as separate executable shell scripts Enabling UI Mode The Db2 Shift UI Mode is automatically invoked when the db2shift command is issued without any parameters. Requesting help with the --help flag will also display help panels using the UI system. If your terminal session does not support color, the UI can be forced to the display the text as WHITE characters on a BLACK background. Use the --mono flag when using the db2shift command. For terminals that do not show any color, please check the settings in the TERM environment variable. echo $TERM If the results do not show xterm-256color then you will need to check what terminal emulations are available with the following command: toe -a This will produce a list of terminal emulations. The preferred settings is xterm-256color, but other color options may also work. Update the terminal emulation setting by issuing the command: export TERM=xterm-256color To make this change permanent on your system, edit the ~/.bashrc configuration file in your instance home directory and add the above command to the end of the script. Save the file and then issue the following command to change the terminal settings. source ~/.bashrc If you find the display contains strange characters (white boxes instead of underscores for fields) like those on the following page, then your OS may not support many of the Unicode characters. This is an indication that Unicode character set extensions have not been installed on the Linux distribution being used. The --mono flag will change the characters so that they are more readable in this environment. When using the UI, the following characters will be substituted for the graphical characters: Underscore (fields) with dots \u201c...\u201d Checkbox selection with asterisk \u201c*\u201d and unselected with dash \u201c-\u201c More (scrollbar) with \u201c+\u201d and previous with \u201c-\u201c The following screen illustrates the difference in mono mode. Menu System Overview The Db2 Shift menu system provides access to all scenarios that are described in this documentation: Shift a Db2 database to OpenShift, Kubernetes or CP4D Shift a Db2 database to another Db2 instance Create a Cloned copy of the Db2 database for later deployment Deploy a clone into an OpenShift, Kubernetes or CP4D container Deploy a clone into another Db2 instance Initialize HADR between Source and Target POD Initialize HADR between Source and Target Instance Initialize DMC and LDAP Authentication for CP4D Copy Cloned databases to a POD The various screens are described in the sections below. Some features that are specific to the UI are: Legal Disclaimer Help Information Analyze Database Configuration Review shift log files Interacting with the UI The Db2 Shift UI is based on a character-based terminal display, similar to VT100 or 3270 technology. Using a character-based display format eliminates the need for a graphic display environment (GDM) and significantly reduces the memory requirements for the program. When using a terminal-based UI, only keyboard entries can be used to navigate the screen (instead of mouse movements). There are some panels which will display URLs pointing to reference material. If your environment provides access to a mouse, you will be able to click on these links. However, mouse clicks within the UI have no effect. The keys that are active within a screen are usually displayed at the bottom of the screen. The last three lines of all Db2 Shift panels will include a message line, a separator line, and a list of all active keys. In this example, there are five keys: ESC - Quit ^F - Field Help ^D - Select Directory ^A - Analyze ^X - Review and Execute The ESCAPE key is used to exit out of the current panel and return to the previous panel. To completely exit out of the program at any time, use the CTRL-C combination. This key (break) will always stop execution of the UI and return you to the terminal prompt. If a letter is provided as an \"action\" key, press that letter on the keyboard. There is no need to use the shift key. If the letter is proceeded with a carat symbol ^ , this represents the control (CTRL) key on the keyboard. In the above example, the ^F key requires that you hit the control key and the F key at the same time. Some screens may use letters for commands - for example, the bottom of the main screen uses letters to switch screens: Panels that require user input will need to use all the characters on the keyboard, so it is not possible to use single keys to invoke an action or move to another panel. To get around this restriction, the control key ( CTRL ) is prefixed to the character ( ^A ) to tell the UI it is an action key rather than a regular input key. The following keys are used for navigation on a panel: ESC - Return to previous screen or close message window DEL - Delete the current character and move text left Shift+DEL - Delete field from cursor to end of field BKSP - Delete the character left of the current character Up/Down - Move up or down to the next field on the screen Left/Right - Move left/right in the field and jump to the next field. Note that long fields will scroll automatically TAB - Tab to the next input field Shift+TAB - Tab backwards to the previous input field ENTER - Select a row, execute a command, or move down to next field Home - Cursor to the beginning of a field End - Cursor to the end of a field PGUP/PGDN - Scroll list up and down when your cursor is in the list. Note that scroll bar on the side indicates if more rows are available. Shift+Up/Shift+Down - Same as page up and page down if those keys are not available SPACEBAR - Select or deselect a list item or turn a value on or off On a Mac (OSX), the function key needs to be used with the Shift+Up/Down arrow to simulate a Page Up or Page Down key. Text Input A text input field will contain underscores that represent the total length of the field. Any text entered into these fields will shift characters to the left (insert mode). Once text hits the end of the field it will no longer allow additional characters to be entered until you delete existing characters. If you need to remove characters from the current character position to the end of the input field, use Shift+DEL to delete them. Fields that only have one character will automatically replace the contents of the field rather than requiring the contents to be deleted. Numeric Input A numeric field will prevent the input of any characters other than valid numbers [0-9]. Long Fields A number of fields require more space than what is available on the screen. These fields are either file or directory names, or server addresses. These long fields will allow characters to roll off the end of the field (disappear from view). You can get to the end of the character string by using the END key or back to the beginning with the HOME key. You can usually tell that the field allows for larger text sizes because there is a tiny plus sign (+) at the end of the input line and also the text will scroll past the end of the input field as you type. Options Option fields provide a way of selecting one option from a list of options. Use the TAB or right arrow to move between the values in the list. Only one option can be selected at a time! To select an option, make sure the option circle is highlighted and then press the SPACEBAR to select the option. The previous option will be de-selected and the new option selected. Check Boxes A Checkbox is either on or off. Use the SPACEBAR to turn an option on or off. Lists There are three types of lists that are found in the UI: Read-only list Select One from the list (similar to Options) Select Multiple Read-only lists are used for documentation and when selecting an item for immediate use (for instance, when selecting a directory). You can move up and down a list using the arrow keys. If the list requires a selection, you must position the cursor on the item you want selected, and then press the ENTER key. Selection lists are similar to Option list where a number of items are shown and one must be selected from the list. The example above includes two options that can be selected (circles) while the other items only have an underscore. Only those items with circles can be selected. Use the SPACEBAR to select one or more options in the list. If the list only allows one item to be selected, it will deselect any existing item and then select the item you were currently on. Finally, lists may be larger than what is shown on the screen. The scrollbar indicators will be placed at the top of the list to indicate whether there are values above or below the current list items that are displayed. Cut and Paste If your system allows the use of a mouse, you are able to copy text from the Db2 Shift UI by selecting the text, using the right mouse button and selecting Copy from the menu. You are also able to paste items into a field positioning the cursor on the field and then selecting Paste from the terminal menu bar. The other option for pasting a value is to use the key combination CTRL-SHIFT-V . This will paste the contents of the clipboard into the current field your cursor is positioned in. Disclaimer The Db2 Shift disclaimer is always displayed when starting the Db2 Shift command. By pressing the ENTER key, you are accepting the terms and conditions of the program. If you press ESCAPE , the program will immediately terminate. Details of the terms and condition are found in the Disclaimer section of this documentation. If you prefer to skip the Disclaimer screen, use the --accept option on the Db2 Shift command line: db2shift --accept Help Panels Help screens are created using read-only lists. The help information will be displayed with scroll bar indicators on the far lefthand side of the text: The up and down arrow indicate that there is text prior to this page and that there is text after this page. Use the Page Up and Page Down buttons (or (fn+)Shift-Up arrow and (fn+)Shift-Down arrow) to scroll through the help. On most panels, pressing ^F (CTRL+F) on a field will display detailed information about that field. For instance, pressing ^F on the follow field: This will result in detailed information about the field being displayed on top of the existing panel: The help information can be dismissed by using the ESCAPE key. Note that arrows on the left side of the text will indicate if you need to use the scroll keys to view additional information. Main Screen The main Db2 Shift screen provides access to all of the scenarios that have been discussed in the documentation. Before describing the various options on the screen, there are some extra screens that can be accessed from the main screen: H - Db2 Shift Help K - Keyboard Help S - Syntax Details L - Legal Disclaimer The Db2 Shift Help provides a general overview of the Db2 Shift program and details on every Db2 Shift scenario. The keyboard help provides a quick guide on how they keys work and the Syntax details provides information on every setting that Db2 Shift uses. The Legal disclaimer provides the entire text of the legal documentation shipped with the Db2 Shift program. Odds are it is larger than all of the code that was written for Db2 Shift! To exit the Db2 Shift program, press ESCAPE from this screen. To select one of the options, use the up and down arrow keys to place the cursor on the option you want and then press the ENTER key. This will display the menu for that option. The options themselves are divided into four sections: Shift - Shift a database from a local instance to a destination Clone - Clone a database and the deploy or copy to a destination HADR - Set up and start HADR between a source and target destination View - Options to analyze a local data or view current log file Details of each one of these panels can be found in the links below. Shift a Db2 database to OpenShift, Kubernetes or CP4D Shift a Db2 database to another Db2 instance Create a Cloned copy of the Db2 database for later deployment Deploy a clone into an OpenShift, Kubernetes or CP4D container Deploy a clone into another Db2 instance Initialize HADR between Source and Target POD Initialize HADR between Source and Target Instance Initialize DMC and LDAP Authentication for CP4D Copy Cloned Databases to a POD Note that not every command line option will be display in the UI panel. For instance, the mode option to move a database to a pod is automatically generated by the UI so there is no requirement for this setting to be supplied. In addition to using the menu system to navigate to the shift scenario you want to perform, you have the option of using the following keywords to go directly to a specific shift menu: --topod \u2013 Shift a Db2 database to a Kubernetes, OpenShift or CP4D pod --todb2 \u2013 Shift a Db2 database to another Db2 instance --clone \u2013 Clone a Db2 database --deploypod \u2013 Deploy a clone to a Kubernetes, OpenShift, or CP4D pod --deploydb2 \u2013 Deploy a clone to another Db2 instance --hadrpod \u2013 Set up connection between source and destination pod --hadrdb2 \u2013 Set up connection between source and Db2 instance --logs \u2013 View logs from last execution Executing Commands Each one of the UI panels has an option to Review and Execute a command. The key that is assigned to execute command is ^X . When the execute button is pressed, the Db2 Shift program will first determine if all of the parameters have been properly filled in. In the event of a problem, an error message will be display and the cursor placed on the field that needs to be updated. When the panel passes all checks, the Db2 Shift command is displayed on another screen. Summary Screen If you have mouse control on your system, you will be able to select the text on this screen and copy it into a script or a terminal session. Alternatively, you can use the ^S Save Command to save the command to a file for future execution. If you press the Execute ^X key on the review page, Db2 Shift will execute your command immediately. The output from the Db2 Shift process will be displayed on the screen (the UI will disappear). Db2 Shift Execution Various messages will be displayed during the execution of the Db2 Shift command with progress bars indicating the current step in the process. When the execution completes, the UI will be displayed with a success indicator and the contents of the log file. Here is an example of a run that fails due to a connection to the Kubernetes cluster is unavailable. The log file is displayed below the run status. You can scroll through this list to determine what steps failed during the Db2 Shift execution. A successful run will also display the log file. The log records are truncated so that you only see 80 characters of the log file. If you want to see more details, the ^W (Wrap Text) will reformat the output so you will be able to see all of the contents of the line. Database Analysis Shifting a database from an instance to a POD requires the Db2 Shift program to check that the source database meets certain criteria including: The source database must be 10.5, 11.1, or 11.5 Only databases created with automatic storage are supported The system contains external procedures which are not in the standard Db2 library - these will need to be manually recreated and catalogued The LOGARCHMETH1/2 setting only supports DISK as a target in Db2u The database encryption keys will be moved to the new location, but if the target already has encrypted databases then you will need to manually migrate the encryption key to the target location This checking is done when the Db2 Shift program begins execution. Even though the database may meet these requirements, the source database environment may have certain settings which need to be present at the target location. By default, all database settings are moved to the target location. However, none of the instance settings are moved during the shift step unless you explicitly name them. In order to test the compatibility of your source database to the target location, the Analyze ^A key can be used: The Analyze option is found in four of the Db2 Shift Scenarios: Shift to Pod Shift to Instance Deploy to Pod Deploy to Instance Note that you cannot run an Analysis step against a database that does not currently exist on the target. This applies only to shift or clone operations that are being performed against a standard Db2 instance and you are requesting that the target database be created by the Db2 Shift command. When the Analyze function is selected, the Db2 Shift program will gather information from the source and target databases and present a report containing the settings that are different between the environments: This examples shows many of the errors that can be reported by the Analysis step. Those items in red will stop a shift from occurring, while those in yellow are features which might cause an issue when the database is started in the target location. Details of the setting are available by pressing ^F while the cursor is on the line of the configuration parameter: Some fields will have additional help available through a web link: If you have access to a mouse, you will be able to click on the link in the field help display and have a web page display with more details on the parameter. Overriding Parameters The items that have circles beside them are values which can be overridden during the shift process. For instance, one of the settings that should change is the instance memory value. The source system currently shows 3.5M pages of memory being allocated, while the target system only provides 600K pages of memory. The database at the target system will end up being memory constrained and may suffer performance degradation because of the lack of memory. To update the target value with the source value, the cursor must be placed on the setting line and the SPACEBAR pressed to select the item. Once you have selected the settings to override, the ^X key is used to take all selected items in the list and place then into the overrides settings of the Shift or Deploy panel. Local Analysis You have the option of checking whether or not a local database is suitable for a shift operation. This option is available at the bottom of the main menu: When you select the Analyze Local Database option, the following screen will be displayed: Enter the name of a local database into this field and hit Enter . The program will analyze the database compared to an empty Db2u container. Note that this analysis is done against a sample installation so many of the settings that are flagged may not be applicable to a real deployment. The analysis will highlight any incompatibilities in the source database, so any warnings or errors that are reported will need to be investigated.","title":"User Interface Overview"},{"location":"gui/#db2-shift-user-interface","text":"Db2 Shift can be run either as a command line utility, or as an application with a menu system. The Db2 Shift menu system provides an easy-to-use interface for generating the appropriate shift commands, and includes extensive help on the various parameters that need to be supplied. This section will discuss the user-interface in detail and describe the additional features that are only found in the UI including: The ability to check the source and destinations to determine whether they are compatible View errors logs for diagnosing problems Ability to save commands as separate executable shell scripts","title":"Db2 Shift User Interface"},{"location":"gui/#enabling-ui-mode","text":"The Db2 Shift UI Mode is automatically invoked when the db2shift command is issued without any parameters. Requesting help with the --help flag will also display help panels using the UI system. If your terminal session does not support color, the UI can be forced to the display the text as WHITE characters on a BLACK background. Use the --mono flag when using the db2shift command. For terminals that do not show any color, please check the settings in the TERM environment variable. echo $TERM If the results do not show xterm-256color then you will need to check what terminal emulations are available with the following command: toe -a This will produce a list of terminal emulations. The preferred settings is xterm-256color, but other color options may also work. Update the terminal emulation setting by issuing the command: export TERM=xterm-256color To make this change permanent on your system, edit the ~/.bashrc configuration file in your instance home directory and add the above command to the end of the script. Save the file and then issue the following command to change the terminal settings. source ~/.bashrc If you find the display contains strange characters (white boxes instead of underscores for fields) like those on the following page, then your OS may not support many of the Unicode characters. This is an indication that Unicode character set extensions have not been installed on the Linux distribution being used. The --mono flag will change the characters so that they are more readable in this environment. When using the UI, the following characters will be substituted for the graphical characters: Underscore (fields) with dots \u201c...\u201d Checkbox selection with asterisk \u201c*\u201d and unselected with dash \u201c-\u201c More (scrollbar) with \u201c+\u201d and previous with \u201c-\u201c The following screen illustrates the difference in mono mode.","title":"Enabling UI Mode"},{"location":"gui/#menu-system-overview","text":"The Db2 Shift menu system provides access to all scenarios that are described in this documentation: Shift a Db2 database to OpenShift, Kubernetes or CP4D Shift a Db2 database to another Db2 instance Create a Cloned copy of the Db2 database for later deployment Deploy a clone into an OpenShift, Kubernetes or CP4D container Deploy a clone into another Db2 instance Initialize HADR between Source and Target POD Initialize HADR between Source and Target Instance Initialize DMC and LDAP Authentication for CP4D Copy Cloned databases to a POD The various screens are described in the sections below. Some features that are specific to the UI are: Legal Disclaimer Help Information Analyze Database Configuration Review shift log files","title":"Menu System Overview"},{"location":"gui/#interacting-with-the-ui","text":"The Db2 Shift UI is based on a character-based terminal display, similar to VT100 or 3270 technology. Using a character-based display format eliminates the need for a graphic display environment (GDM) and significantly reduces the memory requirements for the program. When using a terminal-based UI, only keyboard entries can be used to navigate the screen (instead of mouse movements). There are some panels which will display URLs pointing to reference material. If your environment provides access to a mouse, you will be able to click on these links. However, mouse clicks within the UI have no effect. The keys that are active within a screen are usually displayed at the bottom of the screen. The last three lines of all Db2 Shift panels will include a message line, a separator line, and a list of all active keys. In this example, there are five keys: ESC - Quit ^F - Field Help ^D - Select Directory ^A - Analyze ^X - Review and Execute The ESCAPE key is used to exit out of the current panel and return to the previous panel. To completely exit out of the program at any time, use the CTRL-C combination. This key (break) will always stop execution of the UI and return you to the terminal prompt. If a letter is provided as an \"action\" key, press that letter on the keyboard. There is no need to use the shift key. If the letter is proceeded with a carat symbol ^ , this represents the control (CTRL) key on the keyboard. In the above example, the ^F key requires that you hit the control key and the F key at the same time. Some screens may use letters for commands - for example, the bottom of the main screen uses letters to switch screens: Panels that require user input will need to use all the characters on the keyboard, so it is not possible to use single keys to invoke an action or move to another panel. To get around this restriction, the control key ( CTRL ) is prefixed to the character ( ^A ) to tell the UI it is an action key rather than a regular input key. The following keys are used for navigation on a panel: ESC - Return to previous screen or close message window DEL - Delete the current character and move text left Shift+DEL - Delete field from cursor to end of field BKSP - Delete the character left of the current character Up/Down - Move up or down to the next field on the screen Left/Right - Move left/right in the field and jump to the next field. Note that long fields will scroll automatically TAB - Tab to the next input field Shift+TAB - Tab backwards to the previous input field ENTER - Select a row, execute a command, or move down to next field Home - Cursor to the beginning of a field End - Cursor to the end of a field PGUP/PGDN - Scroll list up and down when your cursor is in the list. Note that scroll bar on the side indicates if more rows are available. Shift+Up/Shift+Down - Same as page up and page down if those keys are not available SPACEBAR - Select or deselect a list item or turn a value on or off On a Mac (OSX), the function key needs to be used with the Shift+Up/Down arrow to simulate a Page Up or Page Down key.","title":"Interacting with the UI"},{"location":"gui/#text-input","text":"A text input field will contain underscores that represent the total length of the field. Any text entered into these fields will shift characters to the left (insert mode). Once text hits the end of the field it will no longer allow additional characters to be entered until you delete existing characters. If you need to remove characters from the current character position to the end of the input field, use Shift+DEL to delete them. Fields that only have one character will automatically replace the contents of the field rather than requiring the contents to be deleted.","title":"Text Input"},{"location":"gui/#numeric-input","text":"A numeric field will prevent the input of any characters other than valid numbers [0-9].","title":"Numeric Input"},{"location":"gui/#long-fields","text":"A number of fields require more space than what is available on the screen. These fields are either file or directory names, or server addresses. These long fields will allow characters to roll off the end of the field (disappear from view). You can get to the end of the character string by using the END key or back to the beginning with the HOME key. You can usually tell that the field allows for larger text sizes because there is a tiny plus sign (+) at the end of the input line and also the text will scroll past the end of the input field as you type.","title":"Long Fields"},{"location":"gui/#options","text":"Option fields provide a way of selecting one option from a list of options. Use the TAB or right arrow to move between the values in the list. Only one option can be selected at a time! To select an option, make sure the option circle is highlighted and then press the SPACEBAR to select the option. The previous option will be de-selected and the new option selected.","title":"Options"},{"location":"gui/#check-boxes","text":"A Checkbox is either on or off. Use the SPACEBAR to turn an option on or off.","title":"Check Boxes"},{"location":"gui/#lists","text":"There are three types of lists that are found in the UI: Read-only list Select One from the list (similar to Options) Select Multiple Read-only lists are used for documentation and when selecting an item for immediate use (for instance, when selecting a directory). You can move up and down a list using the arrow keys. If the list requires a selection, you must position the cursor on the item you want selected, and then press the ENTER key. Selection lists are similar to Option list where a number of items are shown and one must be selected from the list. The example above includes two options that can be selected (circles) while the other items only have an underscore. Only those items with circles can be selected. Use the SPACEBAR to select one or more options in the list. If the list only allows one item to be selected, it will deselect any existing item and then select the item you were currently on. Finally, lists may be larger than what is shown on the screen. The scrollbar indicators will be placed at the top of the list to indicate whether there are values above or below the current list items that are displayed.","title":"Lists"},{"location":"gui/#cut-and-paste","text":"If your system allows the use of a mouse, you are able to copy text from the Db2 Shift UI by selecting the text, using the right mouse button and selecting Copy from the menu. You are also able to paste items into a field positioning the cursor on the field and then selecting Paste from the terminal menu bar. The other option for pasting a value is to use the key combination CTRL-SHIFT-V . This will paste the contents of the clipboard into the current field your cursor is positioned in.","title":"Cut and Paste"},{"location":"gui/#disclaimer","text":"The Db2 Shift disclaimer is always displayed when starting the Db2 Shift command. By pressing the ENTER key, you are accepting the terms and conditions of the program. If you press ESCAPE , the program will immediately terminate. Details of the terms and condition are found in the Disclaimer section of this documentation. If you prefer to skip the Disclaimer screen, use the --accept option on the Db2 Shift command line: db2shift --accept","title":"Disclaimer"},{"location":"gui/#help-panels","text":"Help screens are created using read-only lists. The help information will be displayed with scroll bar indicators on the far lefthand side of the text: The up and down arrow indicate that there is text prior to this page and that there is text after this page. Use the Page Up and Page Down buttons (or (fn+)Shift-Up arrow and (fn+)Shift-Down arrow) to scroll through the help. On most panels, pressing ^F (CTRL+F) on a field will display detailed information about that field. For instance, pressing ^F on the follow field: This will result in detailed information about the field being displayed on top of the existing panel: The help information can be dismissed by using the ESCAPE key. Note that arrows on the left side of the text will indicate if you need to use the scroll keys to view additional information.","title":"Help Panels"},{"location":"gui/#main-screen","text":"The main Db2 Shift screen provides access to all of the scenarios that have been discussed in the documentation. Before describing the various options on the screen, there are some extra screens that can be accessed from the main screen: H - Db2 Shift Help K - Keyboard Help S - Syntax Details L - Legal Disclaimer The Db2 Shift Help provides a general overview of the Db2 Shift program and details on every Db2 Shift scenario. The keyboard help provides a quick guide on how they keys work and the Syntax details provides information on every setting that Db2 Shift uses. The Legal disclaimer provides the entire text of the legal documentation shipped with the Db2 Shift program. Odds are it is larger than all of the code that was written for Db2 Shift! To exit the Db2 Shift program, press ESCAPE from this screen. To select one of the options, use the up and down arrow keys to place the cursor on the option you want and then press the ENTER key. This will display the menu for that option. The options themselves are divided into four sections: Shift - Shift a database from a local instance to a destination Clone - Clone a database and the deploy or copy to a destination HADR - Set up and start HADR between a source and target destination View - Options to analyze a local data or view current log file Details of each one of these panels can be found in the links below. Shift a Db2 database to OpenShift, Kubernetes or CP4D Shift a Db2 database to another Db2 instance Create a Cloned copy of the Db2 database for later deployment Deploy a clone into an OpenShift, Kubernetes or CP4D container Deploy a clone into another Db2 instance Initialize HADR between Source and Target POD Initialize HADR between Source and Target Instance Initialize DMC and LDAP Authentication for CP4D Copy Cloned Databases to a POD Note that not every command line option will be display in the UI panel. For instance, the mode option to move a database to a pod is automatically generated by the UI so there is no requirement for this setting to be supplied. In addition to using the menu system to navigate to the shift scenario you want to perform, you have the option of using the following keywords to go directly to a specific shift menu: --topod \u2013 Shift a Db2 database to a Kubernetes, OpenShift or CP4D pod --todb2 \u2013 Shift a Db2 database to another Db2 instance --clone \u2013 Clone a Db2 database --deploypod \u2013 Deploy a clone to a Kubernetes, OpenShift, or CP4D pod --deploydb2 \u2013 Deploy a clone to another Db2 instance --hadrpod \u2013 Set up connection between source and destination pod --hadrdb2 \u2013 Set up connection between source and Db2 instance --logs \u2013 View logs from last execution","title":"Main Screen"},{"location":"gui/#executing-commands","text":"Each one of the UI panels has an option to Review and Execute a command. The key that is assigned to execute command is ^X . When the execute button is pressed, the Db2 Shift program will first determine if all of the parameters have been properly filled in. In the event of a problem, an error message will be display and the cursor placed on the field that needs to be updated. When the panel passes all checks, the Db2 Shift command is displayed on another screen.","title":"Executing Commands"},{"location":"gui/#summary-screen","text":"If you have mouse control on your system, you will be able to select the text on this screen and copy it into a script or a terminal session. Alternatively, you can use the ^S Save Command to save the command to a file for future execution. If you press the Execute ^X key on the review page, Db2 Shift will execute your command immediately. The output from the Db2 Shift process will be displayed on the screen (the UI will disappear).","title":"Summary Screen"},{"location":"gui/#db2-shift-execution","text":"Various messages will be displayed during the execution of the Db2 Shift command with progress bars indicating the current step in the process. When the execution completes, the UI will be displayed with a success indicator and the contents of the log file. Here is an example of a run that fails due to a connection to the Kubernetes cluster is unavailable. The log file is displayed below the run status. You can scroll through this list to determine what steps failed during the Db2 Shift execution. A successful run will also display the log file. The log records are truncated so that you only see 80 characters of the log file. If you want to see more details, the ^W (Wrap Text) will reformat the output so you will be able to see all of the contents of the line.","title":"Db2 Shift Execution"},{"location":"gui/#database-analysis","text":"Shifting a database from an instance to a POD requires the Db2 Shift program to check that the source database meets certain criteria including: The source database must be 10.5, 11.1, or 11.5 Only databases created with automatic storage are supported The system contains external procedures which are not in the standard Db2 library - these will need to be manually recreated and catalogued The LOGARCHMETH1/2 setting only supports DISK as a target in Db2u The database encryption keys will be moved to the new location, but if the target already has encrypted databases then you will need to manually migrate the encryption key to the target location This checking is done when the Db2 Shift program begins execution. Even though the database may meet these requirements, the source database environment may have certain settings which need to be present at the target location. By default, all database settings are moved to the target location. However, none of the instance settings are moved during the shift step unless you explicitly name them. In order to test the compatibility of your source database to the target location, the Analyze ^A key can be used: The Analyze option is found in four of the Db2 Shift Scenarios: Shift to Pod Shift to Instance Deploy to Pod Deploy to Instance Note that you cannot run an Analysis step against a database that does not currently exist on the target. This applies only to shift or clone operations that are being performed against a standard Db2 instance and you are requesting that the target database be created by the Db2 Shift command. When the Analyze function is selected, the Db2 Shift program will gather information from the source and target databases and present a report containing the settings that are different between the environments: This examples shows many of the errors that can be reported by the Analysis step. Those items in red will stop a shift from occurring, while those in yellow are features which might cause an issue when the database is started in the target location. Details of the setting are available by pressing ^F while the cursor is on the line of the configuration parameter: Some fields will have additional help available through a web link: If you have access to a mouse, you will be able to click on the link in the field help display and have a web page display with more details on the parameter.","title":"Database Analysis"},{"location":"gui/#overriding-parameters","text":"The items that have circles beside them are values which can be overridden during the shift process. For instance, one of the settings that should change is the instance memory value. The source system currently shows 3.5M pages of memory being allocated, while the target system only provides 600K pages of memory. The database at the target system will end up being memory constrained and may suffer performance degradation because of the lack of memory. To update the target value with the source value, the cursor must be placed on the setting line and the SPACEBAR pressed to select the item. Once you have selected the settings to override, the ^X key is used to take all selected items in the list and place then into the overrides settings of the Shift or Deploy panel.","title":"Overriding Parameters"},{"location":"gui/#local-analysis","text":"You have the option of checking whether or not a local database is suitable for a shift operation. This option is available at the bottom of the main menu: When you select the Analyze Local Database option, the following screen will be displayed: Enter the name of a local database into this field and hit Enter . The program will analyze the database compared to an empty Db2u container. Note that this analysis is done against a sample installation so many of the settings that are flagged may not be applicable to a real deployment. The analysis will highlight any incompatibilities in the source database, so any warnings or errors that are reported will need to be investigated.","title":"Local Analysis"},{"location":"guiclone/","text":"UI - Clone a Database The Db2 Shift clone option is used to take an existing Db2 database that is currently on-premise, and clone it into a directory. This cloned database can then be transported to another server and be deployed at that location. The advantage of cloning is that the destination does not need to be connected to the source location and the deployment of the clone can be done at a more convenient time. The Db2 Shift program requires the following information: Source Database details Clone Options The destination details are not required to clone a database. Source Database The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name. Source or Instance Owner The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent. Clone Directory The cloned copy of the database will be placed into the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location and the Apply Clone UI option used to shift the contents of the clone into the Db2 database. Metadata Generation The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error. Refresh The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command. Generate Settings The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created. Verification The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process. Synchronization Options The Db2 Shift program has two methods of moving the database to the destination. The traditional method is to take one pass at the database and move everything at once. During the finishing process, the program will briefly suspend the database (depending on settings) and perform a final refresh. This last step will pick up any database objects that may have changed over the course of the move. The total amount of time the database is suspended is directly related to how much information has changed during the shift process. In the event that you have large amount of changes, the final refresh may too long an outage. To minimize this outage, you can use the synchronization options provided. The default setting is do a complete shift operation without intermediate sync operations. To initialize the synchronization option, select Initialize from the option list. This initial step will instruct Db2 Shift to copy all of the required database objects to the target system. Once the copies are complete, the program will end processing and leave the target system in an incomplete state. During this process the source database is operational and it will not be suspended . When there is an appropriate moment, the database movement can be finalized with the Finalize option. The Finalize option will do one final pass against the source database and then it will finalize the database movement on the destination site. During the last pass the finish process will suspend the database to get a consistent database environment. Once this step completes, the destination database will be available. In the event that the source system has high update volumes, there may be a need to do multiple sync operations to minimize the finalize step. The Db2 Shift command will need to be told that it is syncing the database again, but not to start from scratch. The control files generated by the Initialize option will allow Db2 Shift to move database objects that are new or have changed since the initial synchronization request. The command to do the sync and only refresh the database objects requires the use of the Refresh option. The Refresh option indicates to the Db2 Shift program to start syncing process to look for delta changes only. The Refresh process can be run repeatedly until the amount of changes between runs is minimized. When an appropriate timeslot is available, the shift can be finalized by using the Finalize option. The Finalize option will perform the final pass against the source database and complete the shift process as before. In summary, the standard shift operation will complete in one step ( None option is used). The Initialize option allows you to gradually move a database over time. For a gradual database shift, use the Initialize option on the first run. This will move an initial set of database files to the target. Then use the Refresh option on subsequent runs to copy any files that may have been added or changed to the database. When you are ready to finalize the shift, use the Finalize option to gather any remaining files and complete the shift operation on the target system. Online or Offline Move By default, the Db2 Shift command will suspend the database while it completes the last scan of the files. During this period of time, the database will not complete any insert, update, or delete transactions. This will result in a consistent database at the destination, but some transactions will not have been committed to the database. If the database at the destination must be identical to the source database, then you must choose the Offline Move option which will shut down the database so there will not be any transactions outstanding when the shift is completed. Note: The period of time that the database is suspended or stopped is dependent on the changes that have occurred in the database from the time the shift operation started to the time when copying of the data is complete. The changes that have occurred during this period of time needs to be captured during the final step. It is during this step that the database must be suspended or stopped. During the initial scan the database will remain completely online and will not be impacted by the shift utility from a transaction perspective. However, since there is a large amount of disk reads taking place, it may impact bufferpool read performance. The Offline Move mode must be used when shifting a database that requires a migration from an older release of Db2. This option must be specified when shifting Db2 versions 10.5 or 11.1. Performance: Threading The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance.","title":"UI - Clone a Database"},{"location":"guiclone/#ui-clone-a-database","text":"The Db2 Shift clone option is used to take an existing Db2 database that is currently on-premise, and clone it into a directory. This cloned database can then be transported to another server and be deployed at that location. The advantage of cloning is that the destination does not need to be connected to the source location and the deployment of the clone can be done at a more convenient time. The Db2 Shift program requires the following information: Source Database details Clone Options The destination details are not required to clone a database.","title":"UI - Clone a Database"},{"location":"guiclone/#source-database","text":"The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name.","title":"Source Database"},{"location":"guiclone/#source-or-instance-owner","text":"The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent.","title":"Source or Instance Owner"},{"location":"guiclone/#clone-directory","text":"The cloned copy of the database will be placed into the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location and the Apply Clone UI option used to shift the contents of the clone into the Db2 database.","title":"Clone Directory"},{"location":"guiclone/#metadata-generation","text":"The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error.","title":"Metadata Generation"},{"location":"guiclone/#refresh","text":"The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command.","title":"Refresh"},{"location":"guiclone/#generate-settings","text":"The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created.","title":"Generate Settings"},{"location":"guiclone/#verification","text":"The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process.","title":"Verification"},{"location":"guiclone/#synchronization-options","text":"The Db2 Shift program has two methods of moving the database to the destination. The traditional method is to take one pass at the database and move everything at once. During the finishing process, the program will briefly suspend the database (depending on settings) and perform a final refresh. This last step will pick up any database objects that may have changed over the course of the move. The total amount of time the database is suspended is directly related to how much information has changed during the shift process. In the event that you have large amount of changes, the final refresh may too long an outage. To minimize this outage, you can use the synchronization options provided. The default setting is do a complete shift operation without intermediate sync operations. To initialize the synchronization option, select Initialize from the option list. This initial step will instruct Db2 Shift to copy all of the required database objects to the target system. Once the copies are complete, the program will end processing and leave the target system in an incomplete state. During this process the source database is operational and it will not be suspended . When there is an appropriate moment, the database movement can be finalized with the Finalize option. The Finalize option will do one final pass against the source database and then it will finalize the database movement on the destination site. During the last pass the finish process will suspend the database to get a consistent database environment. Once this step completes, the destination database will be available. In the event that the source system has high update volumes, there may be a need to do multiple sync operations to minimize the finalize step. The Db2 Shift command will need to be told that it is syncing the database again, but not to start from scratch. The control files generated by the Initialize option will allow Db2 Shift to move database objects that are new or have changed since the initial synchronization request. The command to do the sync and only refresh the database objects requires the use of the Refresh option. The Refresh option indicates to the Db2 Shift program to start syncing process to look for delta changes only. The Refresh process can be run repeatedly until the amount of changes between runs is minimized. When an appropriate timeslot is available, the shift can be finalized by using the Finalize option. The Finalize option will perform the final pass against the source database and complete the shift process as before. In summary, the standard shift operation will complete in one step ( None option is used). The Initialize option allows you to gradually move a database over time. For a gradual database shift, use the Initialize option on the first run. This will move an initial set of database files to the target. Then use the Refresh option on subsequent runs to copy any files that may have been added or changed to the database. When you are ready to finalize the shift, use the Finalize option to gather any remaining files and complete the shift operation on the target system.","title":"Synchronization Options"},{"location":"guiclone/#online-or-offline-move","text":"By default, the Db2 Shift command will suspend the database while it completes the last scan of the files. During this period of time, the database will not complete any insert, update, or delete transactions. This will result in a consistent database at the destination, but some transactions will not have been committed to the database. If the database at the destination must be identical to the source database, then you must choose the Offline Move option which will shut down the database so there will not be any transactions outstanding when the shift is completed. Note: The period of time that the database is suspended or stopped is dependent on the changes that have occurred in the database from the time the shift operation started to the time when copying of the data is complete. The changes that have occurred during this period of time needs to be captured during the final step. It is during this step that the database must be suspended or stopped. During the initial scan the database will remain completely online and will not be impacted by the shift utility from a transaction perspective. However, since there is a large amount of disk reads taking place, it may impact bufferpool read performance. The Offline Move mode must be used when shifting a database that requires a migration from an older release of Db2. This option must be specified when shifting Db2 versions 10.5 or 11.1.","title":"Online or Offline Move"},{"location":"guiclone/#performance-threading","text":"The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance.","title":"Performance: Threading"},{"location":"guiclonecopy/","text":"UI - Clone Copy This Db2 Shift command provides a feature that allows a user to copy an existing database clone copy to a POD, or to retrieve a database clone from a POD. Once a database clone has been generated, the copy can be moved to any location and then deployed locally. This option provides a convenient way of copying the database using Db2 Shift without having to use OpenShift or Kubernetes commands. The panel requires the following information: Type of copy (From Source to Target or Target to Source) Source cloned database directory Target cloned database directory The destination POD and server details Source Clone Directory The cloned copy of the database will be placed into the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location. Target Clone Directory The cloned copy of the database will be placed into the target directory that is specified by this field. If you are pulling a copy ( --mode=pull_clone ), this field contains the cloned database that is going to move to the local directory. Target Client The pod client for a copy operation must be supplied as part of the Db2 Shift command. Only one of the following clients must be used: --oc OpenShift Destination --kubectl Kubernetes Destination If the client is Kubernetes ( --kubectl ) or OpenShift ( --oc ), the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified. Destination Server (POD) For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command. Destination Pod Namespace or Project In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option.","title":"UI - Clone Copy"},{"location":"guiclonecopy/#ui-clone-copy","text":"This Db2 Shift command provides a feature that allows a user to copy an existing database clone copy to a POD, or to retrieve a database clone from a POD. Once a database clone has been generated, the copy can be moved to any location and then deployed locally. This option provides a convenient way of copying the database using Db2 Shift without having to use OpenShift or Kubernetes commands. The panel requires the following information: Type of copy (From Source to Target or Target to Source) Source cloned database directory Target cloned database directory The destination POD and server details","title":"UI - Clone Copy"},{"location":"guiclonecopy/#source-clone-directory","text":"The cloned copy of the database will be placed into the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location.","title":"Source Clone Directory"},{"location":"guiclonecopy/#target-clone-directory","text":"The cloned copy of the database will be placed into the target directory that is specified by this field. If you are pulling a copy ( --mode=pull_clone ), this field contains the cloned database that is going to move to the local directory.","title":"Target Clone Directory"},{"location":"guiclonecopy/#target-client","text":"The pod client for a copy operation must be supplied as part of the Db2 Shift command. Only one of the following clients must be used: --oc OpenShift Destination --kubectl Kubernetes Destination If the client is Kubernetes ( --kubectl ) or OpenShift ( --oc ), the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified.","title":"Target Client"},{"location":"guiclonecopy/#destination-server-pod","text":"For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command.","title":"Destination Server (POD)"},{"location":"guiclonecopy/#destination-pod-namespace-or-project","text":"In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option.","title":"Destination Pod Namespace or Project"},{"location":"guideploytoinstance/","text":"UI - Clone Deployment to Another Db2 Instance This Db2 Shift option will take a database clone and deploy it into another Db2 instance running natively (in any environment including Cloud VMs). The panel requires the following information: Database name and clone location Destination instance details Shift Options Source Database The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name. Source or Instance Owner The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent. Clone Directory The cloned copy of the database will be retrieved from the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location and the Apply Clone UI option used to shift the contents of the clone into the Db2 database. Target Location (Instance to Instance) The client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. Only one of the following targets must be used: Remote Db2 Instance Local Db2 Instance If the target is a remote Db2 instance, Db2 Shift expects that a passwordless ssh environment has been established between the source and target servers. The local option only applies to Clones (database copies) that are being deployed onto the same server that the Db2 Shift command is running on. The ability to shift a database locally (i.e. make a copy of a Db2 database on the same instance) is currently disabled due to some restrictions with db2relocatdb . Destination Database The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted! Destination Owner The destination owner value is used for generating the connection address and also used when settings up HADR between a primary and secondary instance. Destination Server (Instance) For destinations that are traditional Db2 instances, you must provide the userid and the IP address or symbolic name of the destination server. You only use an IP address for shifting into a traditional Db2 instance. When connecting to a remote instance, the Db2 Shift program expects that a passwordless ssh environment has been established between the source and target servers. Metadata Generation The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error. Refresh The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command. Generate Settings The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created. Verification The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process. HADR Setup When HADR option is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed. Stored Procedures and Functions By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines. Performance: Threading The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance. Performance: Compression RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size. For slow networks, a higher value may reduce transmission times at the expense of increased CPU overhead.","title":"UI - Clone Deployment to Another Db2 Instance"},{"location":"guideploytoinstance/#ui-clone-deployment-to-another-db2-instance","text":"This Db2 Shift option will take a database clone and deploy it into another Db2 instance running natively (in any environment including Cloud VMs). The panel requires the following information: Database name and clone location Destination instance details Shift Options","title":"UI - Clone Deployment to Another Db2 Instance"},{"location":"guideploytoinstance/#source-database","text":"The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name.","title":"Source Database"},{"location":"guideploytoinstance/#source-or-instance-owner","text":"The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent.","title":"Source or Instance Owner"},{"location":"guideploytoinstance/#clone-directory","text":"The cloned copy of the database will be retrieved from the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location and the Apply Clone UI option used to shift the contents of the clone into the Db2 database.","title":"Clone Directory"},{"location":"guideploytoinstance/#target-location-instance-to-instance","text":"The client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. Only one of the following targets must be used: Remote Db2 Instance Local Db2 Instance If the target is a remote Db2 instance, Db2 Shift expects that a passwordless ssh environment has been established between the source and target servers. The local option only applies to Clones (database copies) that are being deployed onto the same server that the Db2 Shift command is running on. The ability to shift a database locally (i.e. make a copy of a Db2 database on the same instance) is currently disabled due to some restrictions with db2relocatdb .","title":"Target Location (Instance to Instance)"},{"location":"guideploytoinstance/#destination-database","text":"The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted!","title":"Destination Database"},{"location":"guideploytoinstance/#destination-owner","text":"The destination owner value is used for generating the connection address and also used when settings up HADR between a primary and secondary instance.","title":"Destination Owner"},{"location":"guideploytoinstance/#destination-server-instance","text":"For destinations that are traditional Db2 instances, you must provide the userid and the IP address or symbolic name of the destination server. You only use an IP address for shifting into a traditional Db2 instance. When connecting to a remote instance, the Db2 Shift program expects that a passwordless ssh environment has been established between the source and target servers.","title":"Destination Server (Instance)"},{"location":"guideploytoinstance/#metadata-generation","text":"The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error.","title":"Metadata Generation"},{"location":"guideploytoinstance/#refresh","text":"The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command.","title":"Refresh"},{"location":"guideploytoinstance/#generate-settings","text":"The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created.","title":"Generate Settings"},{"location":"guideploytoinstance/#verification","text":"The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process.","title":"Verification"},{"location":"guideploytoinstance/#hadr-setup","text":"When HADR option is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed.","title":"HADR Setup"},{"location":"guideploytoinstance/#stored-procedures-and-functions","text":"By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines.","title":"Stored Procedures and Functions"},{"location":"guideploytoinstance/#performance-threading","text":"The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance.","title":"Performance: Threading"},{"location":"guideploytoinstance/#performance-compression","text":"RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size. For slow networks, a higher value may reduce transmission times at the expense of increased CPU overhead.","title":"Performance: Compression"},{"location":"guideploytopod/","text":"UI - Clone Deployment to OpenShift, Kubernetes, or CP4D This Db2 Shift option will take a database clone and deploy it into a Db2u pod running on OpenShift, Kubernetes or CP4D. The panel requires the following information: Database name and clone location Destination POD details Type of Containerization environment Shift Options Source Database The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name. Alert! If you are shifting a database to Cloud Pak for Data, and your INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO db2inst1 GRANT DBADM ON DATABASE TO db2inst1 The db2inst1 userid does not need to exist in the Operating system in order to grant these privileges to the userid. This requirement does not apply to other Db2 Shift environments. If db2inst1 is not defined as a SECADM and DBADM user in the database, the Data Management Console feature of CP4D will not be able to access the database nor will it be able to monitor it. Source or Instance Owner The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent. Clone Directory The cloned copy of the database will be retrieved from the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location and the Apply Clone UI option used to shift the contents of the clone into the Db2 database. Target Client (Instance to POD) The pod client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. Only one of the following clients must be used: OpenShift Destination Kubernetes Destination Copy of the cloned database is inside the pod If the client is Kubernetes or OpenShift, the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified. The Local option is used when the cloned copy of the database is already been copied inside the POD that it is being shifted to. Destination Database The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted! Destination Pod Namespace or Project In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option. Destination Server (POD) For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command. Metadata Generation The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error. Refresh The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command. Generate Settings The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created. Verification The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process. HADR Setup When HADR mode is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed. Stored Procedures and Functions By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines. Select this option to prevent any external functions being moved to the destination. Performance: Threading The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance. Performance: Compression RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size. For slow networks, a higher value may reduce transmission times at the expense of increased CPU overhead.","title":"UI - Clone Deployment to OpenShift, Kubernetes, or CP4D"},{"location":"guideploytopod/#ui-clone-deployment-to-openshift-kubernetes-or-cp4d","text":"This Db2 Shift option will take a database clone and deploy it into a Db2u pod running on OpenShift, Kubernetes or CP4D. The panel requires the following information: Database name and clone location Destination POD details Type of Containerization environment Shift Options","title":"UI - Clone Deployment to OpenShift, Kubernetes, or CP4D"},{"location":"guideploytopod/#source-database","text":"The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name. Alert! If you are shifting a database to Cloud Pak for Data, and your INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO db2inst1 GRANT DBADM ON DATABASE TO db2inst1 The db2inst1 userid does not need to exist in the Operating system in order to grant these privileges to the userid. This requirement does not apply to other Db2 Shift environments. If db2inst1 is not defined as a SECADM and DBADM user in the database, the Data Management Console feature of CP4D will not be able to access the database nor will it be able to monitor it.","title":"Source Database"},{"location":"guideploytopod/#source-or-instance-owner","text":"The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent.","title":"Source or Instance Owner"},{"location":"guideploytopod/#clone-directory","text":"The cloned copy of the database will be retrieved from the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location and the Apply Clone UI option used to shift the contents of the clone into the Db2 database.","title":"Clone Directory"},{"location":"guideploytopod/#target-client-instance-to-pod","text":"The pod client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. Only one of the following clients must be used: OpenShift Destination Kubernetes Destination Copy of the cloned database is inside the pod If the client is Kubernetes or OpenShift, the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified. The Local option is used when the cloned copy of the database is already been copied inside the POD that it is being shifted to.","title":"Target Client (Instance to POD)"},{"location":"guideploytopod/#destination-database","text":"The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted!","title":"Destination Database"},{"location":"guideploytopod/#destination-pod-namespace-or-project","text":"In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option.","title":"Destination Pod Namespace or Project"},{"location":"guideploytopod/#destination-server-pod","text":"For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command.","title":"Destination Server (POD)"},{"location":"guideploytopod/#metadata-generation","text":"The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error.","title":"Metadata Generation"},{"location":"guideploytopod/#refresh","text":"The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command.","title":"Refresh"},{"location":"guideploytopod/#generate-settings","text":"The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created.","title":"Generate Settings"},{"location":"guideploytopod/#verification","text":"The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process.","title":"Verification"},{"location":"guideploytopod/#hadr-setup","text":"When HADR mode is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed.","title":"HADR Setup"},{"location":"guideploytopod/#stored-procedures-and-functions","text":"By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines. Select this option to prevent any external functions being moved to the destination.","title":"Stored Procedures and Functions"},{"location":"guideploytopod/#performance-threading","text":"The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance.","title":"Performance: Threading"},{"location":"guideploytopod/#performance-compression","text":"RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size. For slow networks, a higher value may reduce transmission times at the expense of increased CPU overhead.","title":"Performance: Compression"},{"location":"guihadrinstance/","text":"UI - Initialize HADR between Source and Target Instance This menu is similar to the previous one where the HADR service is setup between the source Db2 database and another Db2 instance. The Db2 database on the target system must have been created with one of the following settings during the shift step. The panel requires the following information: The source database name and server The destination server details The syntax for initiating the HADR connection between two Db2 servers is: Source Database The source database is the name of the database that you want to set up for HADR at the source and target location. Note that you must have the same database name at the target. If you provide a different database name at the target, the program will generate an error. HADR Source Server For HADR setup, the Db2 Shift command requires the IP or symbolic name of the source server that will be used in an HADR setup. This server is referred to as the primary server. HADR port HADR communicates over a port which is different than the Db2 instance. You must supply the source and destination port numbers that Db2 will communicate between the HADR servers. The default port number is 3700 for HADR communications, but verify the value. The target port number will also be required. Destination Server (Instance) For destinations that are traditional Db2 instances, you must provide the userid and the IP address or symbolic name of the destination server. You only use an IP address for shifting into a traditional Db2 instance. The format of the parameter is userid @ address when using the Db2 Shift command line. When using the UI, this field is generated automatically by combining the destination instance owner name with the destination server address. When connecting to a remote instance, the Db2 Shift program expects that a passwordless ssh environment has been established between the source and target servers. The --ssh flag must be used in conjunction with this parameter.","title":"UI - Initialize HADR between Source and Target Instance"},{"location":"guihadrinstance/#ui-initialize-hadr-between-source-and-target-instance","text":"This menu is similar to the previous one where the HADR service is setup between the source Db2 database and another Db2 instance. The Db2 database on the target system must have been created with one of the following settings during the shift step. The panel requires the following information: The source database name and server The destination server details The syntax for initiating the HADR connection between two Db2 servers is:","title":"UI - Initialize HADR between Source and Target Instance"},{"location":"guihadrinstance/#source-database","text":"The source database is the name of the database that you want to set up for HADR at the source and target location. Note that you must have the same database name at the target. If you provide a different database name at the target, the program will generate an error.","title":"Source Database"},{"location":"guihadrinstance/#hadr-source-server","text":"For HADR setup, the Db2 Shift command requires the IP or symbolic name of the source server that will be used in an HADR setup. This server is referred to as the primary server.","title":"HADR Source Server"},{"location":"guihadrinstance/#hadr-port","text":"HADR communicates over a port which is different than the Db2 instance. You must supply the source and destination port numbers that Db2 will communicate between the HADR servers. The default port number is 3700 for HADR communications, but verify the value. The target port number will also be required.","title":"HADR port"},{"location":"guihadrinstance/#destination-server-instance","text":"For destinations that are traditional Db2 instances, you must provide the userid and the IP address or symbolic name of the destination server. You only use an IP address for shifting into a traditional Db2 instance. The format of the parameter is userid @ address when using the Db2 Shift command line. When using the UI, this field is generated automatically by combining the destination instance owner name with the destination server address. When connecting to a remote instance, the Db2 Shift program expects that a passwordless ssh environment has been established between the source and target servers. The --ssh flag must be used in conjunction with this parameter.","title":"Destination Server (Instance)"},{"location":"guihadrpod/","text":"UI - Initialize HADR between Source and Target POD This Db2 Shift option will take a source and destination (POD) database and start the HADR service between them. The Db2u pod must have been created with the following setting during the shift step. The panel requires the following information: The source database name and server The destination POD and server details Source Database The source database is the name of the database that you want to set up for HADR at the source and target location. Note that you must have the same database name at the target. If you provide a different database name at the target, the program will generate an error. HADR Source Server For HADR setup, the Db2 Shift command requires the IP or symbolic name of the source server that will be used in an HADR setup. This server is referred to as the primary server. HADR port HADR communicates over a port which is different than the Db2 instance. You must supply the source and destination port numbers that Db2 will communicate between the HADR servers. The default port number is 3700 for HADR communications, but verify the value. The target port number will also be required. Target Client (POD) Syntax: --oc , --kubectl The pod client for setting up HADR is required. Only one of the following clients must be used: --oc OpenShift Destination --kubectl Kubernetes Destination If the client is Kubernetes ( --kubectl ) or OpenShift ( --oc ), the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified. Destination Pod Namespace or Project Syntax: --dest-namespace=\"\" , --dest-project=\"\" In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option. Destination Server (POD) Syntax: --dest-server=\"pod_name\" For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command. HADR Destination Server For HADR setup, the Db2 Shift command requires the IP or symbolic name of the source server that will be used in an HADR setup. This server is referred to as the secondary server. For an OpenShift or Kubernetes cluster, use the address of the load balancer.","title":"UI - Initialize HADR between Source and Target POD"},{"location":"guihadrpod/#ui-initialize-hadr-between-source-and-target-pod","text":"This Db2 Shift option will take a source and destination (POD) database and start the HADR service between them. The Db2u pod must have been created with the following setting during the shift step. The panel requires the following information: The source database name and server The destination POD and server details","title":"UI - Initialize HADR between Source and Target POD"},{"location":"guihadrpod/#source-database","text":"The source database is the name of the database that you want to set up for HADR at the source and target location. Note that you must have the same database name at the target. If you provide a different database name at the target, the program will generate an error.","title":"Source Database"},{"location":"guihadrpod/#hadr-source-server","text":"For HADR setup, the Db2 Shift command requires the IP or symbolic name of the source server that will be used in an HADR setup. This server is referred to as the primary server.","title":"HADR Source Server"},{"location":"guihadrpod/#hadr-port","text":"HADR communicates over a port which is different than the Db2 instance. You must supply the source and destination port numbers that Db2 will communicate between the HADR servers. The default port number is 3700 for HADR communications, but verify the value. The target port number will also be required.","title":"HADR port"},{"location":"guihadrpod/#target-client-pod","text":"Syntax: --oc , --kubectl The pod client for setting up HADR is required. Only one of the following clients must be used: --oc OpenShift Destination --kubectl Kubernetes Destination If the client is Kubernetes ( --kubectl ) or OpenShift ( --oc ), the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified.","title":"Target Client (POD)"},{"location":"guihadrpod/#destination-pod-namespace-or-project","text":"Syntax: --dest-namespace=\"\" , --dest-project=\"\" In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option.","title":"Destination Pod Namespace or Project"},{"location":"guihadrpod/#destination-server-pod","text":"Syntax: --dest-server=\"pod_name\" For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command.","title":"Destination Server (POD)"},{"location":"guihadrpod/#hadr-destination-server","text":"For HADR setup, the Db2 Shift command requires the IP or symbolic name of the source server that will be used in an HADR setup. This server is referred to as the secondary server. For an OpenShift or Kubernetes cluster, use the address of the load balancer.","title":"HADR Destination Server"},{"location":"guildapdmc/","text":"UI - LDAP and DMC Initialization This Db2 Shift option only applies when the destination is a POD on K8s or OpenShift. If an associated LDAP repository exists, the db2inst1 user is added. If the IBM Data management console is deployed with a Cloud Pak for Data system, it resets the console and applies the relevant DDL and privileges for monitors. Alert! If you creating a database on Cloud Pak for Data, and your source INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO db2inst1 GRANT DBADM ON DATABASE TO db2inst1 The db2inst1 userid does not need to exist in the Operating system in order to grant these privileges to the userid. This requirement does not apply to other Db2 Shift environments. If db2inst1 is not defined as a SECADM and DBADM user in the database, the Data Management Console feature of CP4D will not be able to access the database nor will it be able to monitor it. The panel requires the following information: Source database owner The destination POD and server details Source or Instance Owner The Db2 Shift program will double check that the instance owner matches that of the target system when applying the LDAP and DMC settings. Target Client The pod client for the security and monitoring update operation must be supplied as part of the Db2 Shift command. Only one of the following clients must be used: --oc OpenShift Destination --kubectl Kubernetes Destination If the client is Kubernetes ( --kubectl ) or OpenShift ( --oc ), the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified. Destination Database The destination database must be supplied so that the updates to the security settings and Data Management Console control tables can be properly inserted. Destination Pod Namespace or Project In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option. Destination Server (POD) For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command.","title":"UI - LDAP and DMC Initialization"},{"location":"guildapdmc/#ui-ldap-and-dmc-initialization","text":"This Db2 Shift option only applies when the destination is a POD on K8s or OpenShift. If an associated LDAP repository exists, the db2inst1 user is added. If the IBM Data management console is deployed with a Cloud Pak for Data system, it resets the console and applies the relevant DDL and privileges for monitors. Alert! If you creating a database on Cloud Pak for Data, and your source INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO db2inst1 GRANT DBADM ON DATABASE TO db2inst1 The db2inst1 userid does not need to exist in the Operating system in order to grant these privileges to the userid. This requirement does not apply to other Db2 Shift environments. If db2inst1 is not defined as a SECADM and DBADM user in the database, the Data Management Console feature of CP4D will not be able to access the database nor will it be able to monitor it. The panel requires the following information: Source database owner The destination POD and server details","title":"UI - LDAP and DMC Initialization"},{"location":"guildapdmc/#source-or-instance-owner","text":"The Db2 Shift program will double check that the instance owner matches that of the target system when applying the LDAP and DMC settings.","title":"Source or Instance Owner"},{"location":"guildapdmc/#target-client","text":"The pod client for the security and monitoring update operation must be supplied as part of the Db2 Shift command. Only one of the following clients must be used: --oc OpenShift Destination --kubectl Kubernetes Destination If the client is Kubernetes ( --kubectl ) or OpenShift ( --oc ), the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified.","title":"Target Client"},{"location":"guildapdmc/#destination-database","text":"The destination database must be supplied so that the updates to the security settings and Data Management Console control tables can be properly inserted.","title":"Destination Database"},{"location":"guildapdmc/#destination-pod-namespace-or-project","text":"In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option.","title":"Destination Pod Namespace or Project"},{"location":"guildapdmc/#destination-server-pod","text":"For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command.","title":"Destination Server (POD)"},{"location":"guishifttoinstance/","text":"UI - Shift a Db2 database to another Db2 instance This format of the Db2 Shift will take an existing Db2 database on an on-premise system, and shift it to another traditional Db2 system hosted on another on-premise server or cloud virtual machine. This does not containerize Db2! The Db2 Shift command requires the following information: Source Database details Destination location Shift Options The db2shift program assumes that you are currently connected to the instance that has the Db2 database and have ssh connectivity to the target server. Source Database The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name. Source or Instance Owner The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent. Destination Database The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted! Destination Owner The destination owner value is used for generating the connection address and also used when settings up HADR between a primary and secondary instance. Destination Server (Instance) For destinations that are traditional Db2 instances, you must provide the userid and the IP address or symbolic name of the destination server. You only use an IP address for shifting into a traditional Db2 instance. When connecting to a remote instance, the Db2 Shift program expects that a passwordless ssh environment has been established between the source and target servers. Stored Procedures and Functions By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines. HADR Setup When HADR option is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed. Metadata Generation The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error. Refresh The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command. Generate Settings The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created. Verification The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process. Synchronization Options The Db2 Shift program has two methods of moving the database to the destination. The traditional method is to take one pass at the database and move everything at once. During the finishing process, the program will briefly suspend the database (depending on settings) and perform a final refresh. This last step will pick up any database objects that may have changed over the course of the move. The total amount of time the database is suspended is directly related to how much information has changed during the shift process. In the event that you have large amount of changes, the final refresh may too long an outage. To minimize this outage, you can use the synchronization options provided. The default setting is do a complete shift operation without intermediate sync operations. To initialize the synchronization option, select Initialize from the option list. This initial step will instruct Db2 Shift to copy all of the required database objects to the target system. Once the copies are complete, the program will end processing and leave the target system in an incomplete state. During this process the source database is operational and it will not be suspended . When there is an appropriate moment, the database movement can be finalized with the Finalize option. The Finalize option will do one final pass against the source database and then it will finalize the database movement on the destination site. During the last pass the finish process will suspend the database to get a consistent database environment. Once this step completes, the destination database will be available. In the event that the source system has high update volumes, there may be a need to do multiple sync operations to minimize the finalize step. The Db2 Shift command will need to be told that it is syncing the database again, but not to start from scratch. The control files generated by the Initialize option will allow Db2 Shift to move database objects that are new or have changed since the initial synchronization request. The command to do the sync and only refresh the database objects requires the use of the Refresh option. The Refresh option indicates to the Db2 Shift program to start syncing process to look for delta changes only. The Refresh process can be run repeatedly until the amount of changes between runs is minimized. When an appropriate timeslot is available, the shift can be finalized by using the Finalize option. The Finalize option will perform the final pass against the source database and complete the shift process as before. In summary, the standard shift operation will complete in one step ( None option is used). The Initialize option allows you to gradually move a database over time. For a gradual database shift, use the Initialize option on the first run. This will move an initial set of database files to the target. Then use the Refresh option on subsequent runs to copy any files that may have been added or changed to the database. When you are ready to finalize the shift, use the Finalize option to gather any remaining files and complete the shift operation on the target system. Online or Offline Move By default, the Db2 Shift command will suspend the database while it completes the last scan of the files. During this period of time, the database will not complete any insert, update, or delete transactions. This will result in a consistent database at the destination, but some transactions will not have been committed to the database. If the database at the destination must be identical to the source database, then you must choose the Offline Move option which will shut down the database so there will not be any transactions outstanding when the shift is completed. Note: The period of time that the database is suspended or stopped is dependent on the changes that have occurred in the database from the time the shift operation started to the time when copying of the data is complete. The changes that have occurred during this period of time needs to be captured during the final step. It is during this step that the database must be suspended or stopped. During the initial scan the database will remain completely online and will not be impacted by the shift utility from a transaction perspective. However, since there is a large amount of disk reads taking place, it may impact bufferpool read performance. The Offline Move mode must be used when shifting a database that requires a migration from an older release of Db2. This option must be specified when shifting Db2 versions 10.5 or 11.1. Performance: Threading The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance. Performance: Compression RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size. For slow networks, a higher value may reduce transmission times at the expense of increased CPU overhead.","title":"UI - Shift a Db2 database to another Db2 instance"},{"location":"guishifttoinstance/#ui-shift-a-db2-database-to-another-db2-instance","text":"This format of the Db2 Shift will take an existing Db2 database on an on-premise system, and shift it to another traditional Db2 system hosted on another on-premise server or cloud virtual machine. This does not containerize Db2! The Db2 Shift command requires the following information: Source Database details Destination location Shift Options The db2shift program assumes that you are currently connected to the instance that has the Db2 database and have ssh connectivity to the target server.","title":"UI - Shift a Db2 database to another Db2 instance"},{"location":"guishifttoinstance/#source-database","text":"The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name.","title":"Source Database"},{"location":"guishifttoinstance/#source-or-instance-owner","text":"The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent.","title":"Source or Instance Owner"},{"location":"guishifttoinstance/#destination-database","text":"The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted!","title":"Destination Database"},{"location":"guishifttoinstance/#destination-owner","text":"The destination owner value is used for generating the connection address and also used when settings up HADR between a primary and secondary instance.","title":"Destination Owner"},{"location":"guishifttoinstance/#destination-server-instance","text":"For destinations that are traditional Db2 instances, you must provide the userid and the IP address or symbolic name of the destination server. You only use an IP address for shifting into a traditional Db2 instance. When connecting to a remote instance, the Db2 Shift program expects that a passwordless ssh environment has been established between the source and target servers.","title":"Destination Server (Instance)"},{"location":"guishifttoinstance/#stored-procedures-and-functions","text":"By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines.","title":"Stored Procedures and Functions"},{"location":"guishifttoinstance/#hadr-setup","text":"When HADR option is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed.","title":"HADR Setup"},{"location":"guishifttoinstance/#metadata-generation","text":"The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error.","title":"Metadata Generation"},{"location":"guishifttoinstance/#refresh","text":"The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command.","title":"Refresh"},{"location":"guishifttoinstance/#generate-settings","text":"The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created.","title":"Generate Settings"},{"location":"guishifttoinstance/#verification","text":"The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process.","title":"Verification"},{"location":"guishifttoinstance/#synchronization-options","text":"The Db2 Shift program has two methods of moving the database to the destination. The traditional method is to take one pass at the database and move everything at once. During the finishing process, the program will briefly suspend the database (depending on settings) and perform a final refresh. This last step will pick up any database objects that may have changed over the course of the move. The total amount of time the database is suspended is directly related to how much information has changed during the shift process. In the event that you have large amount of changes, the final refresh may too long an outage. To minimize this outage, you can use the synchronization options provided. The default setting is do a complete shift operation without intermediate sync operations. To initialize the synchronization option, select Initialize from the option list. This initial step will instruct Db2 Shift to copy all of the required database objects to the target system. Once the copies are complete, the program will end processing and leave the target system in an incomplete state. During this process the source database is operational and it will not be suspended . When there is an appropriate moment, the database movement can be finalized with the Finalize option. The Finalize option will do one final pass against the source database and then it will finalize the database movement on the destination site. During the last pass the finish process will suspend the database to get a consistent database environment. Once this step completes, the destination database will be available. In the event that the source system has high update volumes, there may be a need to do multiple sync operations to minimize the finalize step. The Db2 Shift command will need to be told that it is syncing the database again, but not to start from scratch. The control files generated by the Initialize option will allow Db2 Shift to move database objects that are new or have changed since the initial synchronization request. The command to do the sync and only refresh the database objects requires the use of the Refresh option. The Refresh option indicates to the Db2 Shift program to start syncing process to look for delta changes only. The Refresh process can be run repeatedly until the amount of changes between runs is minimized. When an appropriate timeslot is available, the shift can be finalized by using the Finalize option. The Finalize option will perform the final pass against the source database and complete the shift process as before. In summary, the standard shift operation will complete in one step ( None option is used). The Initialize option allows you to gradually move a database over time. For a gradual database shift, use the Initialize option on the first run. This will move an initial set of database files to the target. Then use the Refresh option on subsequent runs to copy any files that may have been added or changed to the database. When you are ready to finalize the shift, use the Finalize option to gather any remaining files and complete the shift operation on the target system.","title":"Synchronization Options"},{"location":"guishifttoinstance/#online-or-offline-move","text":"By default, the Db2 Shift command will suspend the database while it completes the last scan of the files. During this period of time, the database will not complete any insert, update, or delete transactions. This will result in a consistent database at the destination, but some transactions will not have been committed to the database. If the database at the destination must be identical to the source database, then you must choose the Offline Move option which will shut down the database so there will not be any transactions outstanding when the shift is completed. Note: The period of time that the database is suspended or stopped is dependent on the changes that have occurred in the database from the time the shift operation started to the time when copying of the data is complete. The changes that have occurred during this period of time needs to be captured during the final step. It is during this step that the database must be suspended or stopped. During the initial scan the database will remain completely online and will not be impacted by the shift utility from a transaction perspective. However, since there is a large amount of disk reads taking place, it may impact bufferpool read performance. The Offline Move mode must be used when shifting a database that requires a migration from an older release of Db2. This option must be specified when shifting Db2 versions 10.5 or 11.1.","title":"Online or Offline Move"},{"location":"guishifttoinstance/#performance-threading","text":"The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance.","title":"Performance: Threading"},{"location":"guishifttoinstance/#performance-compression","text":"RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size. For slow networks, a higher value may reduce transmission times at the expense of increased CPU overhead.","title":"Performance: Compression"},{"location":"guishifttopod/","text":"UI - Shift a Db2 database to OpenShift, Kubernetes or CP4D Containerizing an existing Db2 database on an on-premise system to OpenShift, Kubernetes, or CP4D is the most common scenario for using Db2 Shift. In order to move a Db2 database to a POD you will require the following information: Source Database details Destination location Type of Containerization environment Shift Options The target of the Db2 Shift operation can be OpenShift, a Kubernetes cluster, or Cloud Pak for Data system. Source Database The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name. Alert! If you are shifting a database to Cloud Pak for Data, and your INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO db2inst1 GRANT DBADM ON DATABASE TO db2inst1 The db2inst1 userid does not need to exist in the Operating system in order to grant these privileges to the userid. This requirement does not apply to other Db2 Shift environments. If db2inst1 is not defined as a SECADM and DBADM user in the database, the Data Management Console feature of CP4D will not be able to access the database nor will it be able to monitor it. Source or Instance Owner The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent. Target Client (Instance to POD) The pod client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. If the client is Kubernetes or OpenShift, the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified. Destination Database The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted! Destination Pod Namespace or Project In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option. Destination Server (POD) For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command. Synchronization Options The Db2 Shift program has two methods of moving the database to the destination. The traditional method is to take one pass at the database and move everything at once. During the finishing process, the program will briefly suspend the database (depending on settings) and perform a final refresh. This last step will pick up any database objects that may have changed over the course of the move. The total amount of time the database is suspended is directly related to how much information has changed during the shift process. In the event that you have large amount of changes, the final refresh may too long an outage. To minimize this outage, you can use the synchronization options provided. The default setting is do a complete shift operation without intermediate sync operations. To initialize the synchronization option, select Initialize from the option list. This initial step will instruct Db2 Shift to copy all of the required database objects to the target system. Once the copies are complete, the program will end processing and leave the target system in an incomplete state. During this process the source database is operational and it will not be suspended . When there is an appropriate moment, the database movement can be finalized with the Finalize option. The Finalize option will do one final pass against the source database and then it will finalize the database movement on the destination site. During the last pass the finish process will suspend the database to get a consistent database environment. Once this step completes, the destination database will be available. In the event that the source system has high update volumes, there may be a need to do multiple sync operations to minimize the finalize step. The Db2 Shift command will need to be told that it is syncing the database again, but not to start from scratch. The control files generated by the Initialize option will allow Db2 Shift to move database objects that are new or have changed since the initial synchronization request. The command to do the sync and only refresh the database objects requires the use of the Refresh option. The Refresh option indicates to the Db2 Shift program to start syncing process to look for delta changes only. The Refresh process can be run repeatedly until the amount of changes between runs is minimized. When an appropriate timeslot is available, the shift can be finalized by using the Finalize option. The Finalize option will perform the final pass against the source database and complete the shift process as before. In summary, the standard shift operation will complete in one step ( None option is used). The Initialize option allows you to gradually move a database over time. For a gradual database shift, use the Initialize option on the first run. This will move an initial set of database files to the target. Then use the Refresh option on subsequent runs to copy any files that may have been added or changed to the database. When you are ready to finalize the shift, use the Finalize option to gather any remaining files and complete the shift operation on the target system. Metadata Generation The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error. Refresh The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command. Generate Settings The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created. Verification The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process. Move Option The move option determines what steps the Db2 Shift program will take to move your database to the new location. The following are the values that move can have. The Database option will take a copy of your Db2 database and copy it into the target Db2U container or instance. No other processing is done with the database. If you choose the Database/LDAP/DMC option, the database will be moved and the program will also apply any security and console settings that are required. The ALL option is necessary in CP4D environments where the LDAP settings need to be updated and the DMC console needs to be reset to recognize the new database. When Move Database for HADR mode is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed. Stored Procedures and Functions By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines. Select this option to prevent any external functions being moved to the destination. Online or Offline Move By default, the Db2 Shift command will suspend the database while it completes the last scan of the files. During this period of time, the database will not complete any insert, update, or delete transactions. This will result in a consistent database at the destination, but some transactions will not have been committed to the database. If the database at the destination must be identical to the source database, then you must choose the Offline Move option which will shut down the database so there will not be any transactions outstanding when the shift is completed. Note: The period of time that the database is suspended or stopped is dependent on the changes that have occurred in the database from the time the shift operation started to the time when copying of the data is complete. The changes that have occurred during this period of time needs to be captured during the final step. It is during this step that the database must be suspended or stopped. During the initial scan the database will remain completely online and will not be impacted by the shift utility from a transaction perspective. However, since there is a large amount of disk reads taking place, it may impact bufferpool read performance. The Offline Move mode must be used when shifting a database that requires a migration from an older release of Db2. This option must be specified when shifting Db2 versions 10.5 or 11.1. Performance: Threading The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance. Performance: Compression RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size. For slow networks, a higher value may reduce transmission times at the expense of increased CPU overhead.","title":"UI - Shift a Db2 database to OpenShift, Kubernetes or CP4D"},{"location":"guishifttopod/#ui-shift-a-db2-database-to-openshift-kubernetes-or-cp4d","text":"Containerizing an existing Db2 database on an on-premise system to OpenShift, Kubernetes, or CP4D is the most common scenario for using Db2 Shift. In order to move a Db2 database to a POD you will require the following information: Source Database details Destination location Type of Containerization environment Shift Options The target of the Db2 Shift operation can be OpenShift, a Kubernetes cluster, or Cloud Pak for Data system.","title":"UI - Shift a Db2 database to OpenShift, Kubernetes or CP4D"},{"location":"guishifttopod/#source-database","text":"The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name. Alert! If you are shifting a database to Cloud Pak for Data, and your INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO db2inst1 GRANT DBADM ON DATABASE TO db2inst1 The db2inst1 userid does not need to exist in the Operating system in order to grant these privileges to the userid. This requirement does not apply to other Db2 Shift environments. If db2inst1 is not defined as a SECADM and DBADM user in the database, the Data Management Console feature of CP4D will not be able to access the database nor will it be able to monitor it.","title":"Source Database"},{"location":"guishifttopod/#source-or-instance-owner","text":"The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent.","title":"Source or Instance Owner"},{"location":"guishifttopod/#target-client-instance-to-pod","text":"The pod client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. If the client is Kubernetes or OpenShift, the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified.","title":"Target Client (Instance to POD)"},{"location":"guishifttopod/#destination-database","text":"The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted!","title":"Destination Database"},{"location":"guishifttopod/#destination-pod-namespace-or-project","text":"In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option.","title":"Destination Pod Namespace or Project"},{"location":"guishifttopod/#destination-server-pod","text":"For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command.","title":"Destination Server (POD)"},{"location":"guishifttopod/#synchronization-options","text":"The Db2 Shift program has two methods of moving the database to the destination. The traditional method is to take one pass at the database and move everything at once. During the finishing process, the program will briefly suspend the database (depending on settings) and perform a final refresh. This last step will pick up any database objects that may have changed over the course of the move. The total amount of time the database is suspended is directly related to how much information has changed during the shift process. In the event that you have large amount of changes, the final refresh may too long an outage. To minimize this outage, you can use the synchronization options provided. The default setting is do a complete shift operation without intermediate sync operations. To initialize the synchronization option, select Initialize from the option list. This initial step will instruct Db2 Shift to copy all of the required database objects to the target system. Once the copies are complete, the program will end processing and leave the target system in an incomplete state. During this process the source database is operational and it will not be suspended . When there is an appropriate moment, the database movement can be finalized with the Finalize option. The Finalize option will do one final pass against the source database and then it will finalize the database movement on the destination site. During the last pass the finish process will suspend the database to get a consistent database environment. Once this step completes, the destination database will be available. In the event that the source system has high update volumes, there may be a need to do multiple sync operations to minimize the finalize step. The Db2 Shift command will need to be told that it is syncing the database again, but not to start from scratch. The control files generated by the Initialize option will allow Db2 Shift to move database objects that are new or have changed since the initial synchronization request. The command to do the sync and only refresh the database objects requires the use of the Refresh option. The Refresh option indicates to the Db2 Shift program to start syncing process to look for delta changes only. The Refresh process can be run repeatedly until the amount of changes between runs is minimized. When an appropriate timeslot is available, the shift can be finalized by using the Finalize option. The Finalize option will perform the final pass against the source database and complete the shift process as before. In summary, the standard shift operation will complete in one step ( None option is used). The Initialize option allows you to gradually move a database over time. For a gradual database shift, use the Initialize option on the first run. This will move an initial set of database files to the target. Then use the Refresh option on subsequent runs to copy any files that may have been added or changed to the database. When you are ready to finalize the shift, use the Finalize option to gather any remaining files and complete the shift operation on the target system.","title":"Synchronization Options"},{"location":"guishifttopod/#metadata-generation","text":"The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error.","title":"Metadata Generation"},{"location":"guishifttopod/#refresh","text":"The Refresh option determines whether or not the existing metadata is refreshed. The default is value for the Meta Data field is Refresh . The Refresh option will delete any existing metadata files and recreate them on your system during the shift operation. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the None option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. One scenario that involves the use of None occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command.","title":"Refresh"},{"location":"guishifttopod/#generate-settings","text":"The Settings Only option will generate the meta files but will prevent Db2 Shift from continuing execution after the metadata files have been created.","title":"Generate Settings"},{"location":"guishifttopod/#verification","text":"The Verify option will generate the metadata files and check the connectivity and all settings and then stop execution. If Verify completes successfully, the Db2 Shift command will be able to execute the shift process.","title":"Verification"},{"location":"guishifttopod/#move-option","text":"The move option determines what steps the Db2 Shift program will take to move your database to the new location. The following are the values that move can have. The Database option will take a copy of your Db2 database and copy it into the target Db2U container or instance. No other processing is done with the database. If you choose the Database/LDAP/DMC option, the database will be moved and the program will also apply any security and console settings that are required. The ALL option is necessary in CP4D environments where the LDAP settings need to be updated and the DMC console needs to be reset to recognize the new database. When Move Database for HADR mode is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed.","title":"Move Option"},{"location":"guishifttopod/#stored-procedures-and-functions","text":"By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines. Select this option to prevent any external functions being moved to the destination.","title":"Stored Procedures and Functions"},{"location":"guishifttopod/#online-or-offline-move","text":"By default, the Db2 Shift command will suspend the database while it completes the last scan of the files. During this period of time, the database will not complete any insert, update, or delete transactions. This will result in a consistent database at the destination, but some transactions will not have been committed to the database. If the database at the destination must be identical to the source database, then you must choose the Offline Move option which will shut down the database so there will not be any transactions outstanding when the shift is completed. Note: The period of time that the database is suspended or stopped is dependent on the changes that have occurred in the database from the time the shift operation started to the time when copying of the data is complete. The changes that have occurred during this period of time needs to be captured during the final step. It is during this step that the database must be suspended or stopped. During the initial scan the database will remain completely online and will not be impacted by the shift utility from a transaction perspective. However, since there is a large amount of disk reads taking place, it may impact bufferpool read performance. The Offline Move mode must be used when shifting a database that requires a migration from an older release of Db2. This option must be specified when shifting Db2 versions 10.5 or 11.1.","title":"Online or Offline Move"},{"location":"guishifttopod/#performance-threading","text":"The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance.","title":"Performance: Threading"},{"location":"guishifttopod/#performance-compression","text":"RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size. For slow networks, a higher value may reduce transmission times at the expense of increased CPU overhead.","title":"Performance: Compression"},{"location":"hadrinstance/","text":"Initialize HADR between Source and Target Instance This menu is similar to the previous one where the HADR service is setup between the source Db2 database and another Db2 instance. The Db2 database on the target system must have been created with one of the following settings during the shift step. Syntax: --hadr The panel requires the following information: The source database name and server The destination server details The syntax for initiating the HADR connection between two Db2 servers is: db2shift Required Options --mode=hadr_setup --dest-type=OTHER --ssh --source-dbname=flights --source-hadr-host=some.server.com --source-hadr-port=3700 --dest-server=db2inst1@other.server.com --dest-hadr-host=oc.server.com --dest-hadr-port=3700 The panel that provides this capability: Mode Option (Command Line Only) Syntax: --mode=hadr_setup The HADR option is used to initialize and start HADR between a source and target server. This step would be run after the database has been shifted to the new location. This option is not used for the initial HADR setup of the target system. The target database must be created with the --hadr option in order for it be placed into the correct mode for HADR communication. The --hadr is enabled for pods with the HADR option in the menu. Target Client (Command Line Only) Syntax: --ssh The HADR connection between instances must use --ssh . Db2 Shift expects that a passwordless ssh environment has been established between the source and target servers. Settings (Command Line and UI) Database Name Source HADR IP Source HADR Port Destination Owner Target HADR IP Target HADR Port","title":"HADR Setup Instance to Instance"},{"location":"hadrinstance/#initialize-hadr-between-source-and-target-instance","text":"This menu is similar to the previous one where the HADR service is setup between the source Db2 database and another Db2 instance. The Db2 database on the target system must have been created with one of the following settings during the shift step. Syntax: --hadr The panel requires the following information: The source database name and server The destination server details The syntax for initiating the HADR connection between two Db2 servers is: db2shift Required Options --mode=hadr_setup --dest-type=OTHER --ssh --source-dbname=flights --source-hadr-host=some.server.com --source-hadr-port=3700 --dest-server=db2inst1@other.server.com --dest-hadr-host=oc.server.com --dest-hadr-port=3700 The panel that provides this capability:","title":"Initialize HADR between Source and Target Instance"},{"location":"hadrinstance/#mode-option-command-line-only","text":"Syntax: --mode=hadr_setup The HADR option is used to initialize and start HADR between a source and target server. This step would be run after the database has been shifted to the new location. This option is not used for the initial HADR setup of the target system. The target database must be created with the --hadr option in order for it be placed into the correct mode for HADR communication. The --hadr is enabled for pods with the HADR option in the menu.","title":"Mode Option (Command Line Only)"},{"location":"hadrinstance/#target-client-command-line-only","text":"Syntax: --ssh The HADR connection between instances must use --ssh . Db2 Shift expects that a passwordless ssh environment has been established between the source and target servers.","title":"Target Client (Command Line Only)"},{"location":"hadrinstance/#settings-command-line-and-ui","text":"Database Name Source HADR IP Source HADR Port Destination Owner Target HADR IP Target HADR Port","title":"Settings (Command Line and UI)"},{"location":"hadrpod/","text":"Initialize HADR between Source and Target POD This Db2 Shift option will take a source and destination (POD) database and start the HADR service between them. The Db2u pod must have been created with the following setting during the shift step. Syntax: --hadr The panel requires the following information: The source database name and server The destination POD and server details The syntax for initiating the HADR connection between two Db2 servers is: db2shift Required Options --mode=hadr_setup --dest-type=POD --oc or --kubectl --source-dbname=flights --source-hadr-host=some.server.com --source-hadr-port=3700 --dest-server=c-demo-db2u-0 --dest-hadr-host=oc.server.com Optional Settings --dest-namespace=db2u The panel that provides this capability: Mode Option (Command Line Only) Syntax: --mode=hadr_setup The HADR option is used to initialize and start HADR between a source and target server. This step would be run after the database has been shifted to the new location. This option is not used for the initial HADR setup of the target system. The target database must be created with the --hadr option in order for it be placed into the correct mode for HADR communication. The --hadr is enabled for pods with the Move Database for HADR option in the menu. Destination Type (Command Line Only) Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI. Settings (Command Line and UI) Database Name Source HADR IP Source HADR Port Target Location POD Project POD Name Target HADR IP","title":"HADR Setup Instance to Pod"},{"location":"hadrpod/#initialize-hadr-between-source-and-target-pod","text":"This Db2 Shift option will take a source and destination (POD) database and start the HADR service between them. The Db2u pod must have been created with the following setting during the shift step. Syntax: --hadr The panel requires the following information: The source database name and server The destination POD and server details The syntax for initiating the HADR connection between two Db2 servers is: db2shift Required Options --mode=hadr_setup --dest-type=POD --oc or --kubectl --source-dbname=flights --source-hadr-host=some.server.com --source-hadr-port=3700 --dest-server=c-demo-db2u-0 --dest-hadr-host=oc.server.com Optional Settings --dest-namespace=db2u The panel that provides this capability:","title":"Initialize HADR between Source and Target POD"},{"location":"hadrpod/#mode-option-command-line-only","text":"Syntax: --mode=hadr_setup The HADR option is used to initialize and start HADR between a source and target server. This step would be run after the database has been shifted to the new location. This option is not used for the initial HADR setup of the target system. The target database must be created with the --hadr option in order for it be placed into the correct mode for HADR communication. The --hadr is enabled for pods with the Move Database for HADR option in the menu.","title":"Mode Option (Command Line Only)"},{"location":"hadrpod/#destination-type-command-line-only","text":"Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI.","title":"Destination Type (Command Line Only)"},{"location":"hadrpod/#settings-command-line-and-ui","text":"Database Name Source HADR IP Source HADR Port Target Location POD Project POD Name Target HADR IP","title":"Settings (Command Line and UI)"},{"location":"installation/","text":"Db2 Shift Installation Installation The Db2 Shift program ( db2shift ) is a single executable image that can be run directly on Linux. This is a bundled application which means that it contains files and settings that are part of the executable code. From a user perspective, no additional software is required to run it. The program does not create any directories on your system, but it will generate files during the execution of a shift. A best practice would be to create a new directory only for the purposes of the running the Db2 Shift code. The Db2 Shift program is bundled into a single zip file which contains version of the code for different Linux distributions (there may be more than those listed). CentOS 6, Red Hat 6 - db2shift-centos6 CentOS 7, Red Hat 7 - db2shift-centos7 CentOS 8, CentOS Stream, Red Hat 8 - db2shift-centos8 Ubuntu 18.04 - db2shift-ubuntu18 Ubuntu 20.04 - db2shift-ubuntu20 SUSE 11.4 - db2shift-suse11 Power Linux - db2shift-powerLE Note : The current Technical Preview site provides the ability to download individual versions of the Db2 Shift program rather than a bundled zip file. Rename the Db2 Shift version that is suitable for your environment to db2shift: mv db2shift-centos7 db2shift Place the program into its own directory and make sure that it has the execution bit set. chmod +x ./db2shift Additional versions may be added depending on feedback from users. The program will work in command mode for all environments. If you attempt to use the UI mode with the incorrect OS version, the screen may look distorted. If your display looks like this, then you will have the wrong version installed. If you are running on a different platform than those listed above, please contact us directly. See Appendix B for details. Program Download The program is currently in Technical Preview and is available from the following download site: Db2 Click to Containerize Technical Preview You will need an IBM userid to register and gain access to the program.","title":"Installation"},{"location":"installation/#db2-shift-installation","text":"","title":"Db2 Shift Installation"},{"location":"installation/#installation","text":"The Db2 Shift program ( db2shift ) is a single executable image that can be run directly on Linux. This is a bundled application which means that it contains files and settings that are part of the executable code. From a user perspective, no additional software is required to run it. The program does not create any directories on your system, but it will generate files during the execution of a shift. A best practice would be to create a new directory only for the purposes of the running the Db2 Shift code. The Db2 Shift program is bundled into a single zip file which contains version of the code for different Linux distributions (there may be more than those listed). CentOS 6, Red Hat 6 - db2shift-centos6 CentOS 7, Red Hat 7 - db2shift-centos7 CentOS 8, CentOS Stream, Red Hat 8 - db2shift-centos8 Ubuntu 18.04 - db2shift-ubuntu18 Ubuntu 20.04 - db2shift-ubuntu20 SUSE 11.4 - db2shift-suse11 Power Linux - db2shift-powerLE Note : The current Technical Preview site provides the ability to download individual versions of the Db2 Shift program rather than a bundled zip file. Rename the Db2 Shift version that is suitable for your environment to db2shift: mv db2shift-centos7 db2shift Place the program into its own directory and make sure that it has the execution bit set. chmod +x ./db2shift Additional versions may be added depending on feedback from users. The program will work in command mode for all environments. If you attempt to use the UI mode with the incorrect OS version, the screen may look distorted. If your display looks like this, then you will have the wrong version installed. If you are running on a different platform than those listed above, please contact us directly. See Appendix B for details.","title":"Installation"},{"location":"installation/#program-download","text":"The program is currently in Technical Preview and is available from the following download site: Db2 Click to Containerize Technical Preview You will need an IBM userid to register and gain access to the program.","title":"Program Download"},{"location":"ldapdmc/","text":"LDAP and DMC Initialization This Db2 Shift option only applies when the destination is a POD on K8s or OpenShift. When shifting a database to a CP4D platform or LDAP-secured environment, the Db2 Shift program will automatically add the appropriate userids to the LDAP service and reset the Data Management Console (DMC) so that it recognizes the database. If you choose to shift a database to CP4D, and set it up as an HADR secondary, the LDAP and DMC setup cannot be performed until after you have converted the secondary POD into the primary database. Only when the POD is the primary database can it be initialized to support LDAP and DMC services on IBM Cloud Pak for Data. Alert! If you creating a database on Cloud Pak for Data, and your source INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO db2inst1 GRANT DBADM ON DATABASE TO db2inst1 The db2inst1 userid does not need to exist in the Operating system in order to grant these privileges to the userid. This requirement does not apply to other Db2 Shift environments. If db2inst1 is not defined as a SECADM and DBADM user in the database, the Data Management Console feature of CP4D will not be able to access the database nor will it be able to monitor it. The panel requires the following information: Source database owner The destination POD and server details The syntax for updating the LDAP security and initializing the DMC console is: db2shift Required Options --mode=sec_and_monitor --dest-type=POD --oc or --kubectl --source-owner=db2inst1 --dest-dbname=flights --dest-server=c-demo-db2u-0 Optional Settings --dest-namespace=db2u The panel that provides this capability: Mode Option (Command Line Only) Syntax: --mode=sec_and_monitor This setting only applies when the destination is a POD on K8s or OpenShift. If an associated LDAP repository exists, the db2inst1 user is added. If the IBM Data management console is deployed with a Cloud Pak for Data system, it resets the console and applies the relevant DDL and privileges for monitors. Destination Type (Command Line Only) Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI. Settings (Command Line and UI) Source or Instance Owner Target Client (Pod) Destination Database Destination Pod Namespace or Project Destination Server (Pod)","title":"LDAP and DMC Initialization"},{"location":"ldapdmc/#ldap-and-dmc-initialization","text":"This Db2 Shift option only applies when the destination is a POD on K8s or OpenShift. When shifting a database to a CP4D platform or LDAP-secured environment, the Db2 Shift program will automatically add the appropriate userids to the LDAP service and reset the Data Management Console (DMC) so that it recognizes the database. If you choose to shift a database to CP4D, and set it up as an HADR secondary, the LDAP and DMC setup cannot be performed until after you have converted the secondary POD into the primary database. Only when the POD is the primary database can it be initialized to support LDAP and DMC services on IBM Cloud Pak for Data. Alert! If you creating a database on Cloud Pak for Data, and your source INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO db2inst1 GRANT DBADM ON DATABASE TO db2inst1 The db2inst1 userid does not need to exist in the Operating system in order to grant these privileges to the userid. This requirement does not apply to other Db2 Shift environments. If db2inst1 is not defined as a SECADM and DBADM user in the database, the Data Management Console feature of CP4D will not be able to access the database nor will it be able to monitor it. The panel requires the following information: Source database owner The destination POD and server details The syntax for updating the LDAP security and initializing the DMC console is: db2shift Required Options --mode=sec_and_monitor --dest-type=POD --oc or --kubectl --source-owner=db2inst1 --dest-dbname=flights --dest-server=c-demo-db2u-0 Optional Settings --dest-namespace=db2u The panel that provides this capability:","title":"LDAP and DMC Initialization"},{"location":"ldapdmc/#mode-option-command-line-only","text":"Syntax: --mode=sec_and_monitor This setting only applies when the destination is a POD on K8s or OpenShift. If an associated LDAP repository exists, the db2inst1 user is added. If the IBM Data management console is deployed with a Cloud Pak for Data system, it resets the console and applies the relevant DDL and privileges for monitors.","title":"Mode Option (Command Line Only)"},{"location":"ldapdmc/#destination-type-command-line-only","text":"Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI.","title":"Destination Type (Command Line Only)"},{"location":"ldapdmc/#settings-command-line-and-ui","text":"Source or Instance Owner Target Client (Pod) Destination Database Destination Pod Namespace or Project Destination Server (Pod)","title":"Settings (Command Line and UI)"},{"location":"prerequisites/","text":"Pre-requisites The are several pre-requisites for running the Db2 Shift program itself, as well as requirements related to the Db2 database and the target Db2 system. The Db2 Shift program will analyze the source database and prevent any shifts from occurring that will not work because of the target database environment. An additional analysis feature is provided which will determine if any INSTANCE parameters on the source system need to be moved to the TARGET system. The database can be shifted without the corresponding target INSTANCE settings being modified, but it may affect the behavior of the database when it is running in the new environment. Target Users The Db2 Shift program has been designed for experienced DBAs or casual users through the GUI interface. It is more likely that the user interface will be used for analysis and initial testing while production use will use the command line version. The user requires intimate knowledge of current INSTANCE settings to make sure the containerized environment has sufficient resources to run the workloads. Further details of what is required to run the Db2 Shift program is described below. Db2 Shift Program Requirements The Db2 Shift program is a single executable Linux program that can be installed in any directory. The only requirement is that the program is marked as executable and is accessible to the Db2 INSTANCE owner. The program itself is self-contained and does not require any additional libraries to run. The program can be removed by simply deleting the file. When the program executes, it will generate temporary files that are used during the shift process. It is recommended that the program be run from within a directory so that all files generated can be easily found. The program itself requires only 8M of space and sufficient disk space for the log and control files that are generated. The following Linux environments have been tested as source systems: Linux X64, CentOS (7,8), CentOS Stream, Red Hat (7,8) Ubuntu 18.04, 20.04, SUSE 11.4 Linux PPC (PowerPC) Little Endian has been tested as a target location Connectivity Requirements The shifting of a database from one environment to another requires connectivity between the servers. The process by which Db2 Shift moves data requires a connection to either an OpenShift/Kubernetes/CP4D cluster, a server-less ssh connection, or a local connection. When shifting data to OpenShift, Kubernetes, or CP4D, the Db2 Shift program will require the following: A suitable client for the Cluster software OpenShift CLI (oc) for OpenShift and Cloud Pak for Data shifts Kuberbetes CLI (kubectl) for all Kubernetes clusters SSH serverless connection to the target system Local connection does not require a client but is only available for deployment of cloned databases OpenShift Version 3.11, 4.x Cloud Pak for Data 3.5, 4.x Kubernetes Version 1.19 A connection between the Source and Target servers Sufficient disk space in /tmp or other directory (for Clone operations only) Note that some Linux distributions do not support the OpenShift CLI. For instance, only the Kubernetes CLI is available for SUSE 11.4 environments. Customers wanting to shift from a SUSE 11.4 environment to CP4D or OpenShift will need to use the Clone option and then copy the clone directory to a client that does support the OC client. Userid and Authentication Requirements The Db2 Shift operation must take place under the userid of the INSTANCE owner of the database being shifted. Traditionally this userid has been db2inst1 but may be different in your environment. The user must be logged in as the INSTANCE owner and must have access to the db2shift command. The instance owner must also have ssh server-less connectivity to the TARGET system if a Db2-to-Db2 instance shift is being performed. The ssh connection is not required when shifting into a containerized (OpenShift, Kubernetes, CP4D) environment. To access the TARGET pod in a cluster, the user must have authenticated to OpenShift or Kubernetes and have access to the POD that Db2 is running on. For OpenShift environments, authentication is done either through a userid and password or a token. An example of connecting with a userid/password: oc login -u ocadmin -p ocadmin Shifting to Cloud Pak for Data does not require a CP4D userid. The OpenShift userid or token for the underlying cluster is required to authenticate for the Db2 Shift operation. Kubernetes installations will require the use of a profile (Config) to connect to the cluster. For both OpenShift and Kubernetes shift operations, the namespace (Kubernetes) or project (OpenShift) name will be required. In the case of CP4D the namespace is usually cp4d but it depends on how the cluster was deployed. In OpenShift and Kubernetes, the default namespace/project must be set prior to running the Db2 Shift command. You can override the namespace and project in the command but setting the namespace prior to executing the script will minimize errors with Db2u pods not being found. Target Database Requirements The target database should be created before running the Db2 Shift command. The Db2 Shift command cannot create the database for you in containerized environments (OpenShift, Kubernetes, CP4D). You must use the CP4D console to create a new database, or the Db2u Operators on OpenShift or Kubernetes to create and deploy the Db2 database. For traditional Db2 installations, the database would be created using the CREATE DATABASE command. The new database name should be the same as the database being shifted. This is a strict requirement for CP4D databases, but not necessary for the other environments. Db2 Shift will take the existing database and clone it into the target database name. For shifting or cloning a database to a traditional Db2 Instance, Db2 Shift will create the database on your behalf if you specify the create database flag. Otherwise, the program will stop execution because the target database will not be found. Db2 databases created in clustered environments are always created at the latest level (11.5.7+). For traditional Db2 instances created using the db2install command, a minimum level of 11.5 should be used since prior versions are now considered out of service. In addition, the nodes of an MPP configuration must match that of the SOURCE database and the memory, disk, and cores should match the SOURCE database requirements. Source Database Requirements The source database can be moved as long as the following conditions are met: The database resides on a Linux server (X64 or PowerLinux LE) The database was created with Automatic storage The database is an OLTP, SMP, or MPP system Row or Column mode storage, including encrypted databases Mirror, Archive, and Overflow Logs User Defined Functions/Procedures located in the SQL lib Directory Db2 Version 10.5, 11.1, or 11.5 servers can be moved and upgraded at the same time The following features are not currently supported: pureScale Feature (Not available yet in the Db2u container) Text Extender There are a few configuration settings which cannot be shifted: Only databases created with automatic storage are supported The system contains external procedures which are not in the standard Db2 library - these will need to be manually recreated and catalogued The LOGARCHMETH1/2 setting only supports DISK as a target in Db2u The database encryption keys will be moved to the new location, but if the target already has encrypted databases then you will need to manually migrate the encryption key to the target location Instance Owner and DBADM and SECADM Userid Special care must be taken when moving a database into Cloud Pak for Data or into any Db2U deployment. The Db2U POD always uses db2inst1 as the instance owner. If your instance owner is different (i.e., db2inst2), the db2inst1 user at the target will not have any privileges on this database. You will not be able to manage the database. In addition, for Cloud Pak for Data environments, your database name on CP4D must match the source database name. If the database names are mismatched, the Data Management Console and CP4D services will be unable to detect and manage the database. If you are shifting a database to Cloud Pak for Data or a Db2u POD, and your source INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO USER db2inst1 GRANT DBADM ON DATABASE TO USER db2inst1 The db2inst1 userid does not need to exist in the Operating system to grant these privileges to the userid. If you are moving the database to a traditional Db2 instance, you could always create a new userid at the OS level to manage the database, but this option is not available in a container.","title":"Pre-Requisites"},{"location":"prerequisites/#pre-requisites","text":"The are several pre-requisites for running the Db2 Shift program itself, as well as requirements related to the Db2 database and the target Db2 system. The Db2 Shift program will analyze the source database and prevent any shifts from occurring that will not work because of the target database environment. An additional analysis feature is provided which will determine if any INSTANCE parameters on the source system need to be moved to the TARGET system. The database can be shifted without the corresponding target INSTANCE settings being modified, but it may affect the behavior of the database when it is running in the new environment.","title":"Pre-requisites"},{"location":"prerequisites/#target-users","text":"The Db2 Shift program has been designed for experienced DBAs or casual users through the GUI interface. It is more likely that the user interface will be used for analysis and initial testing while production use will use the command line version. The user requires intimate knowledge of current INSTANCE settings to make sure the containerized environment has sufficient resources to run the workloads. Further details of what is required to run the Db2 Shift program is described below.","title":"Target Users"},{"location":"prerequisites/#db2-shift-program-requirements","text":"The Db2 Shift program is a single executable Linux program that can be installed in any directory. The only requirement is that the program is marked as executable and is accessible to the Db2 INSTANCE owner. The program itself is self-contained and does not require any additional libraries to run. The program can be removed by simply deleting the file. When the program executes, it will generate temporary files that are used during the shift process. It is recommended that the program be run from within a directory so that all files generated can be easily found. The program itself requires only 8M of space and sufficient disk space for the log and control files that are generated. The following Linux environments have been tested as source systems: Linux X64, CentOS (7,8), CentOS Stream, Red Hat (7,8) Ubuntu 18.04, 20.04, SUSE 11.4 Linux PPC (PowerPC) Little Endian has been tested as a target location","title":"Db2 Shift Program Requirements"},{"location":"prerequisites/#connectivity-requirements","text":"The shifting of a database from one environment to another requires connectivity between the servers. The process by which Db2 Shift moves data requires a connection to either an OpenShift/Kubernetes/CP4D cluster, a server-less ssh connection, or a local connection. When shifting data to OpenShift, Kubernetes, or CP4D, the Db2 Shift program will require the following: A suitable client for the Cluster software OpenShift CLI (oc) for OpenShift and Cloud Pak for Data shifts Kuberbetes CLI (kubectl) for all Kubernetes clusters SSH serverless connection to the target system Local connection does not require a client but is only available for deployment of cloned databases OpenShift Version 3.11, 4.x Cloud Pak for Data 3.5, 4.x Kubernetes Version 1.19 A connection between the Source and Target servers Sufficient disk space in /tmp or other directory (for Clone operations only) Note that some Linux distributions do not support the OpenShift CLI. For instance, only the Kubernetes CLI is available for SUSE 11.4 environments. Customers wanting to shift from a SUSE 11.4 environment to CP4D or OpenShift will need to use the Clone option and then copy the clone directory to a client that does support the OC client.","title":"Connectivity Requirements"},{"location":"prerequisites/#userid-and-authentication-requirements","text":"The Db2 Shift operation must take place under the userid of the INSTANCE owner of the database being shifted. Traditionally this userid has been db2inst1 but may be different in your environment. The user must be logged in as the INSTANCE owner and must have access to the db2shift command. The instance owner must also have ssh server-less connectivity to the TARGET system if a Db2-to-Db2 instance shift is being performed. The ssh connection is not required when shifting into a containerized (OpenShift, Kubernetes, CP4D) environment. To access the TARGET pod in a cluster, the user must have authenticated to OpenShift or Kubernetes and have access to the POD that Db2 is running on. For OpenShift environments, authentication is done either through a userid and password or a token. An example of connecting with a userid/password: oc login -u ocadmin -p ocadmin Shifting to Cloud Pak for Data does not require a CP4D userid. The OpenShift userid or token for the underlying cluster is required to authenticate for the Db2 Shift operation. Kubernetes installations will require the use of a profile (Config) to connect to the cluster. For both OpenShift and Kubernetes shift operations, the namespace (Kubernetes) or project (OpenShift) name will be required. In the case of CP4D the namespace is usually cp4d but it depends on how the cluster was deployed. In OpenShift and Kubernetes, the default namespace/project must be set prior to running the Db2 Shift command. You can override the namespace and project in the command but setting the namespace prior to executing the script will minimize errors with Db2u pods not being found.","title":"Userid and Authentication Requirements"},{"location":"prerequisites/#target-database-requirements","text":"The target database should be created before running the Db2 Shift command. The Db2 Shift command cannot create the database for you in containerized environments (OpenShift, Kubernetes, CP4D). You must use the CP4D console to create a new database, or the Db2u Operators on OpenShift or Kubernetes to create and deploy the Db2 database. For traditional Db2 installations, the database would be created using the CREATE DATABASE command. The new database name should be the same as the database being shifted. This is a strict requirement for CP4D databases, but not necessary for the other environments. Db2 Shift will take the existing database and clone it into the target database name. For shifting or cloning a database to a traditional Db2 Instance, Db2 Shift will create the database on your behalf if you specify the create database flag. Otherwise, the program will stop execution because the target database will not be found. Db2 databases created in clustered environments are always created at the latest level (11.5.7+). For traditional Db2 instances created using the db2install command, a minimum level of 11.5 should be used since prior versions are now considered out of service. In addition, the nodes of an MPP configuration must match that of the SOURCE database and the memory, disk, and cores should match the SOURCE database requirements.","title":"Target Database Requirements"},{"location":"prerequisites/#source-database-requirements","text":"The source database can be moved as long as the following conditions are met: The database resides on a Linux server (X64 or PowerLinux LE) The database was created with Automatic storage The database is an OLTP, SMP, or MPP system Row or Column mode storage, including encrypted databases Mirror, Archive, and Overflow Logs User Defined Functions/Procedures located in the SQL lib Directory Db2 Version 10.5, 11.1, or 11.5 servers can be moved and upgraded at the same time The following features are not currently supported: pureScale Feature (Not available yet in the Db2u container) Text Extender There are a few configuration settings which cannot be shifted: Only databases created with automatic storage are supported The system contains external procedures which are not in the standard Db2 library - these will need to be manually recreated and catalogued The LOGARCHMETH1/2 setting only supports DISK as a target in Db2u The database encryption keys will be moved to the new location, but if the target already has encrypted databases then you will need to manually migrate the encryption key to the target location","title":"Source Database Requirements"},{"location":"prerequisites/#instance-owner-and-dbadm-and-secadm-userid","text":"Special care must be taken when moving a database into Cloud Pak for Data or into any Db2U deployment. The Db2U POD always uses db2inst1 as the instance owner. If your instance owner is different (i.e., db2inst2), the db2inst1 user at the target will not have any privileges on this database. You will not be able to manage the database. In addition, for Cloud Pak for Data environments, your database name on CP4D must match the source database name. If the database names are mismatched, the Data Management Console and CP4D services will be unable to detect and manage the database. If you are shifting a database to Cloud Pak for Data or a Db2u POD, and your source INSTANCE userid is not db2inst1, you must execute the following SQL commands from a userid that has SECADM authority: GRANT SECADM ON DATABASE TO USER db2inst1 GRANT DBADM ON DATABASE TO USER db2inst1 The db2inst1 userid does not need to exist in the Operating system to grant these privileges to the userid. If you are moving the database to a traditional Db2 instance, you could always create a new userid at the OS level to manage the database, but this option is not available in a container.","title":"Instance Owner and DBADM and SECADM Userid"},{"location":"reference/","text":"Options Reference The following section includes all of the parameters that are used by the Db2 Shift program. Each section will display the syntax for that option, along with an image of the field in the UI that you would complete or select. Mode Option Syntax: --mode=[all,move,clone,apply_clone,sec_and_monitor,hadr_setup] The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. When using the UI to generate the scripts, the mode option may not be displayed since it is explicitly created for you. For instance, when cloning a database, the --mode=clone will have been generated as part of the command. The following are the values that mode option can have. Move Database Only Syntax: --mode=move The MOVE option will take a copy of your Db2 database and copy it into the target Db2U container or instance. No other processing is done with the database. Move Database and Set up LDAP and DMC Settings Syntax: --mode=all If you choose the ALL option, the database will be moved and the program will also apply any security and console settings that are required. This is equivalent to running mode=move and mode=sec_and_monitor one after another. The ALL option is necessary in CP4D environments where the LDAP settings need to be updated and the DMC console needs to be reset to recognize the new database. This option is not applicable for Db2 instance to Db2 instance moves. Clone a Database Syntax: --mode=clone The CLONE option can be used to create a copy of database to be moved to another location and then deployed. This feature is useful in situations where the target system cannot be reached through the network due to firewall issues. Apply a Clone to a POD or Instance Syntax: --mode=apply_clone The APPLY_CLONE option will take an existing CLONEd database and shift it to a POD or a Db2 instance. There is no need to be connected to the original database because all of the control information is contained within the CLONEs image. HADR Setup Mode Syntax: --mode=hadr_setup The HADR option is used to initialize and start HADR between a source and target server. This step would be run after the database has been shifted to the new location. This option is not used for the initial HADR setup of the target system. The target database must be created with the --hadr option in order for it be placed into the correct mode for HADR communication. The --hadr is enabled for pods with the Move Database for HADR option in the menu. When moving a database to another instance, the HADR option is on a separate line. LDAP Security and DMC Setup Syntax: --mode=sec_and_monitor This setting only applies when the destination is a POD on K8s or OpenShift. If an associated LDAP repository exists, the db2inst1 user is added. If the IBM Data management console is deployed with a Cloud Pak for Data system, it resets the console and applies the relevant DDL and privileges for monitors. Copy Mode Syntax: --mode=push_clone , --mode=pull_clone The Db2 Shift will copy a cloned database to a pod, or retrieve the contents of a cloned database back to the local instance. Target Client Instance to Instance Syntax: --ssh , --local The client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. Only one of the following targets must be used: --ssh Remote Db2 Instance --local Local Db2 Instance If the target is a remote Db2 instance ( --ssh ), Db2 Shift expects that a passwordless ssh environment has been established between the source and target servers. The --local option only applies to Clones (database copies) that are being deployed onto the same server that the Db2 Shift command is running on. The ability to shift a database locally (i.e. make a copy of a Db2 database on the same instance) is currently disabled due to some restrictions with db2relocatdb . Target Client Instance to POD Syntax: --oc , --kubectl , --local The pod client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. Only one of the following clients must be used: --oc OpenShift Destination --kubectl Kubernetes Destination --local Copy of the cloned database is inside the pod If the client is Kubernetes ( --kubectl ) or OpenShift ( --oc ), the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified. The --local option is used when the cloned copy of the database is already been copied inside the POD that it is being shifted to. Source Database Syntax: --source-database=\"\" The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name. Source or Instance Owner Syntax: --source-owner=\"instance name\" The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent. Destination Database Syntax: --dest-database=\"\" The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted! Force Destination Database Creation Syntax: --dest-create-db During a shift or clone operation to a traditional Db2 INSTANCE, the Db2 Shift program will check whether or not the target database exists. If it does not, the Db2 Shift operation will fail. If the Force Database Creation setting is on, Db2 Shift will attempt to create the database first and then run the shift operation. Note: Db2 Shift will create the database in a directory structure under /db2_portable on the target system. Destination Owner Syntax: --dest-owner=\"instance name\" The destination owner value is primarily used when settings up HADR between a primary and secondary instance. However, the value can be supplied so that Db2 Shift can check that the correct credentials are available at the target site. Note that the --dest-owner parameter is only required when doing an HADR setup. Destination Server POD Syntax: --dest-server=\"pod_name\" For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command. Destination Server Instance Syntax: --dest-server=userid@ip.address For destinations that are traditional Db2 instances, you must provide the userid and the IP address or symbolic name of the destination server. You only use an IP address for shifting into a traditional Db2 instance. The format of the parameter is userid @ address when using the Db2 Shift command line. When using the UI, this field is generated automatically by combining the destination instance owner name with the destination server address. When connecting to a remote instance, the Db2 Shift program expects that a passwordless ssh environment has been established between the source and target servers. The --ssh flag must be used in conjunction with this parameter. HADR Setup Syntax: --hadr When HADR mode is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed. HADR Source or Destination Server Syntax: --source-hadr-server=\"\" , --dest-hadr-server=\"\" For HADR setup, the Db2 Shift command requires the IP or symbolic name of the source server that will be used in an HADR setup. This server is referred to as the primary server. If the destination server is a standard Db2 instance, use the IP address of the server. If the destination target is an OpenShift or Kubernetes cluster, use the address of the load balancer. HADR ports Syntax: --source-hadr-port=# HADR communicates over a port which is different than the Db2 instance. You must supply the source and destination port numbers that Db2 will communicate between the HADR servers. The default port number is 3700 for HADR communications, but verify the value. The target port number is only required when HADR is being initialized between two traditional Db2 instances. If you are connecting to a POD, this value is not required because the Db2 Shift program will generate it automatically for you. Destination Pod Namespace or Project Syntax: --dest-namespace=\"\" , --dest-project=\"\" In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option. Clone Directory Syntax: --clone-dir=\"\" The cloned copy of the database will be placed into the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location and the --mode=apply_clone option used to shift the contents of the clone into the Db2 database. Source Clone Directory Syntax: --local-dir=\"\" The cloned copy of the database will be retrieved or stored in this location depending on what type of copy operation is being performance. Target Clone Directory Syntax: --dest-dir=\"\" The cloned copy of the database will be placed into the target directory that is specified by this field. If you are pulling a copy ( --mode=pull_clone ), this field contains the cloned database that is going to move to the local directory. Synchronization Options Syntax: --sync=[start_sync, rerun_sync, finish_sync] The Db2 Shift program has two methods of moving the database to the destination. The traditional method is to take one pass at the database and move everything at once. During the finishing process, the program will briefly suspend the database (depending on settings) and perform a final refresh. This last step will pick up any database objects that may have changed over the course of the move. The total amount of time the database is suspended is directly related to how much information has changed during the shift process. In the event that you have large amount of changes, the final refresh may too long an outage. To minimize this outage, you can use the synchronization options provided. The default setting is do a complete shift operation without intermediate sync operations. To initialize the synchronization option, the first Db2 Shift command will use the sync option. Syntax: --sync=start_sync This initial step will instruct Db2 Shift to copy all of the required database objects to the target system. Once the copies are complete, the program will end processing and leave the target system in an incomplete state. During this process the source database is operational and it will not be suspended . When there is an appropriate moment, the database movement can be finalized with the finish_sync option. Syntax: --sync=finish_sync The finish_sync option will do one final pass against the source database and then it will finalize the database movement on the destination site. During the last pass the finish process will suspend the database to get a consistent database environment. Once this step completes, the destination database will be available. In the event that the source system has high update volumes, there may be a need to do multiple sync operations to minimize the finalize step. The Db2 Shift command will need to be told that it is syncing the database again, but not to start from scratch. The control files generated by the --sync=start_sync option will allow Db2 Shift to move database objects that are new or have changed since the initial synchronization request. The command to do the sync and only refresh the database objects requires the use of the rerun_sync option. Syntax: --sync=rerun_sync The rerun_sync option indicates to the Db2 Shift program to start syncing process to look for delta changes only. The --sync=rerun_sync process can be run repeatedly until the amount of changes between runs is minimized. When an appropriate timeslot is available, the shift can be finalized by using the finish_sync option. Syntax: --sync=finish_sync The finish_sync option will perform the final pass against the source database and complete the shift process as before. In summary, the standard shift operation will complete in one step (no --sync option is used). The --sync=start_sync option allows you to gradually move a database over time. For a gradual database shift, use the start_sync option on the first run. This will move an initial set of database files to the target. Then use the rerun_sync option on subsequent runs to copy any files that may have been added or changed to the database. When you are ready to finalize the shift, use the finish_sync option to gather any remaining files and complete the shift operation on the target system. Metadata Generation Syntax: --blank-slate=[true|false] , --gen-settings , --verify-only The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error. Blank Slate Syntax: --blank-slate=true The --blank-slate option determines whether or not the existing metadata is refreshed. The default is value for --blank-slate is true which will display in the GUI as Refresh . The --blank-slate option will delete any existing metadata files and recreate them on your system during the shift operation. The default option is true which will result in new source and destination settings being generated. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the --blank-slate=false option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. Syntax: --blank-slate=false One scenario that involves the use of --blank-slate=false occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command. Generate Settings Syntax: --blank-slate=true , --gen-settings The --gen-settings (Generate Settings) option is used in conjunction with --blank-slate . The use of --gen-settings will prevent Db2 Shift from continuing execution after the metadata files have been created. Verification Syntax: --verify-only The --verify-only option will generate the metadata files and check the connectivity and all settings and then stop execution. If --verify-only completes successfully, the Db2 Shift command will be able to execute the shift process. Online or Offline Move Syntax: --online , --offline Db2 Shift provides two options when dealing with the state of a database during the shift process: --online - database is online while the shift is taking place --offline - database has been shut down By default, the Db2 Shift command assumes you will use online mode and will suspend the database while it completes the last scan of the files. During this period, the database will not complete any insert, update, or delete transactions. This will result in a consistent database at the destination, but some transactions will not have been committed to the database. If the database at the destination must be identical to the source database, then you must completely shut down the database and choose the --offline option. During the last step of the shift process, Db2 Shift will search for any updates that may have been applied to the database after the initial copying was done. To ensure the integrity of the data being copied, the database will be placed into a WRITE SUSPEND mode. This last step should only take a few seconds and the database will be WRITE RESUMED when the final copy is done. When the database is suspended, all read activities will continue. New connections will not be permitted, but any applications that are currently running will be allowed to continue. Those transactions that are updating records will be temporarily \"paused\" while the copying is done. Once the copy is complete, a suspended application will finish their transaction. The period that the database is suspended or stopped is dependent on the changes that have occurred in the database from the time the shift operation started to the time when copying of the data is complete. The changes that have occurred during this period needs to be captured during the final step. It is during this step that the database must be suspended or stopped. During the initial scan the database will remain completely online and will not be impacted by the shift utility from a transaction perspective. However, since there is a large amount of disk reads taking place, it may impact buffer pool read performance. The offline mode must be used when shifting a database that requires a migration from an older release of Db2. This option must be specified when shifting Db2 versions 10.5 or 11.1. To use offline mode, you must run Db2 Shift against the source and target using: Shift command with --verify-only This step will generate a copy of the control files needed: Db2 Shift operation using the offline mode --offline If you do not create the control files beforehand, the Db2 Shift operation will not have the necessary control files to run the shift. Threading Syntax: --threads=[1..8] The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance. Compression Syntax: --compression=[0..9] RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size on slow networks (<1Gb/s). For high-speed networks, a value of 0 is recommended unless there is a requirement to reduce network traffic. Stored Procedures and Functions Syntax: --exclude-functions By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines. Use the exclude flag to prevent any external functions being moved to the destination. Overrides Syntax: --overrides=\"\" The overrides field is used to update INSTANCE settings at the target location. All database settings are moved during the shift process, but no INSTANCE settings are changed. If you need to change any INSTANCE settings, place the name of the parameter, following by the value on this line. Multiple parameters can be placed on the line by separating each parameter/value pair with a semi-colon ; .","title":"Options Reference"},{"location":"reference/#options-reference","text":"The following section includes all of the parameters that are used by the Db2 Shift program. Each section will display the syntax for that option, along with an image of the field in the UI that you would complete or select.","title":"Options Reference"},{"location":"reference/#mode-option","text":"Syntax: --mode=[all,move,clone,apply_clone,sec_and_monitor,hadr_setup] The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. When using the UI to generate the scripts, the mode option may not be displayed since it is explicitly created for you. For instance, when cloning a database, the --mode=clone will have been generated as part of the command. The following are the values that mode option can have.","title":"Mode Option"},{"location":"reference/#move-database-only","text":"Syntax: --mode=move The MOVE option will take a copy of your Db2 database and copy it into the target Db2U container or instance. No other processing is done with the database.","title":"Move Database Only"},{"location":"reference/#move-database-and-set-up-ldap-and-dmc-settings","text":"Syntax: --mode=all If you choose the ALL option, the database will be moved and the program will also apply any security and console settings that are required. This is equivalent to running mode=move and mode=sec_and_monitor one after another. The ALL option is necessary in CP4D environments where the LDAP settings need to be updated and the DMC console needs to be reset to recognize the new database. This option is not applicable for Db2 instance to Db2 instance moves.","title":"Move Database and Set up LDAP and DMC Settings"},{"location":"reference/#clone-a-database","text":"Syntax: --mode=clone The CLONE option can be used to create a copy of database to be moved to another location and then deployed. This feature is useful in situations where the target system cannot be reached through the network due to firewall issues.","title":"Clone a Database"},{"location":"reference/#apply-a-clone-to-a-pod-or-instance","text":"Syntax: --mode=apply_clone The APPLY_CLONE option will take an existing CLONEd database and shift it to a POD or a Db2 instance. There is no need to be connected to the original database because all of the control information is contained within the CLONEs image.","title":"Apply a Clone to a POD or Instance"},{"location":"reference/#hadr-setup-mode","text":"Syntax: --mode=hadr_setup The HADR option is used to initialize and start HADR between a source and target server. This step would be run after the database has been shifted to the new location. This option is not used for the initial HADR setup of the target system. The target database must be created with the --hadr option in order for it be placed into the correct mode for HADR communication. The --hadr is enabled for pods with the Move Database for HADR option in the menu. When moving a database to another instance, the HADR option is on a separate line.","title":"HADR Setup Mode"},{"location":"reference/#ldap-security-and-dmc-setup","text":"Syntax: --mode=sec_and_monitor This setting only applies when the destination is a POD on K8s or OpenShift. If an associated LDAP repository exists, the db2inst1 user is added. If the IBM Data management console is deployed with a Cloud Pak for Data system, it resets the console and applies the relevant DDL and privileges for monitors.","title":"LDAP Security and DMC Setup"},{"location":"reference/#copy-mode","text":"Syntax: --mode=push_clone , --mode=pull_clone The Db2 Shift will copy a cloned database to a pod, or retrieve the contents of a cloned database back to the local instance.","title":"Copy Mode"},{"location":"reference/#target-client-instance-to-instance","text":"Syntax: --ssh , --local The client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. Only one of the following targets must be used: --ssh Remote Db2 Instance --local Local Db2 Instance If the target is a remote Db2 instance ( --ssh ), Db2 Shift expects that a passwordless ssh environment has been established between the source and target servers. The --local option only applies to Clones (database copies) that are being deployed onto the same server that the Db2 Shift command is running on. The ability to shift a database locally (i.e. make a copy of a Db2 database on the same instance) is currently disabled due to some restrictions with db2relocatdb .","title":"Target Client Instance to Instance"},{"location":"reference/#target-client-instance-to-pod","text":"Syntax: --oc , --kubectl , --local The pod client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. Only one of the following clients must be used: --oc OpenShift Destination --kubectl Kubernetes Destination --local Copy of the cloned database is inside the pod If the client is Kubernetes ( --kubectl ) or OpenShift ( --oc ), the program requires that the appropriate kubectl or oc client has been installed locally and that the namespace or project has already been specified. The --local option is used when the cloned copy of the database is already been copied inside the POD that it is being shifted to.","title":"Target Client Instance to POD"},{"location":"reference/#source-database","text":"Syntax: --source-database=\"\" The source database is the name of the database that you want to move to the new location. Note that you can have the same or different database name at the target. If you provide a different database name at the target, the program will copy the database from the source and place it on the target and use the existing name.","title":"Source Database"},{"location":"reference/#source-or-instance-owner","text":"Syntax: --source-owner=\"instance name\" The Db2 Shift program makes the assumption that the current userid you are logged into is the owner of the instance. This is necessary due to the requirement to access the underlying files that are used by Db2. If you supply the source owner value, Db2 Shift will double check that you are working in the correct instance and the settings files are consistent.","title":"Source or Instance Owner"},{"location":"reference/#destination-database","text":"Syntax: --dest-database=\"\" The destination database name can be the same as the source database, or a completely different name. Make sure that if you are creating a database with a different name that it doesn't currently exist on your target system. Otherwise, the target database will be deleted!","title":"Destination Database"},{"location":"reference/#force-destination-database-creation","text":"Syntax: --dest-create-db During a shift or clone operation to a traditional Db2 INSTANCE, the Db2 Shift program will check whether or not the target database exists. If it does not, the Db2 Shift operation will fail. If the Force Database Creation setting is on, Db2 Shift will attempt to create the database first and then run the shift operation. Note: Db2 Shift will create the database in a directory structure under /db2_portable on the target system.","title":"Force Destination Database Creation"},{"location":"reference/#destination-owner","text":"Syntax: --dest-owner=\"instance name\" The destination owner value is primarily used when settings up HADR between a primary and secondary instance. However, the value can be supplied so that Db2 Shift can check that the correct credentials are available at the target site. Note that the --dest-owner parameter is only required when doing an HADR setup.","title":"Destination Owner"},{"location":"reference/#destination-server-pod","text":"Syntax: --dest-server=\"pod_name\" For deployments to OpenShift, Kubernetes, or CP4D, you must supply the name of the POD that Db2U is running in. The OpenShift or Kubernetes client should be used to connect to the target namespace or project before issuing the Db2 Shift command.","title":"Destination Server POD"},{"location":"reference/#destination-server-instance","text":"Syntax: --dest-server=userid@ip.address For destinations that are traditional Db2 instances, you must provide the userid and the IP address or symbolic name of the destination server. You only use an IP address for shifting into a traditional Db2 instance. The format of the parameter is userid @ address when using the Db2 Shift command line. When using the UI, this field is generated automatically by combining the destination instance owner name with the destination server address. When connecting to a remote instance, the Db2 Shift program expects that a passwordless ssh environment has been established between the source and target servers. The --ssh flag must be used in conjunction with this parameter.","title":"Destination Server Instance"},{"location":"reference/#hadr-setup","text":"Syntax: --hadr When HADR mode is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed.","title":"HADR Setup"},{"location":"reference/#hadr-source-or-destination-server","text":"Syntax: --source-hadr-server=\"\" , --dest-hadr-server=\"\" For HADR setup, the Db2 Shift command requires the IP or symbolic name of the source server that will be used in an HADR setup. This server is referred to as the primary server. If the destination server is a standard Db2 instance, use the IP address of the server. If the destination target is an OpenShift or Kubernetes cluster, use the address of the load balancer.","title":"HADR Source or Destination Server"},{"location":"reference/#hadr-ports","text":"Syntax: --source-hadr-port=# HADR communicates over a port which is different than the Db2 instance. You must supply the source and destination port numbers that Db2 will communicate between the HADR servers. The default port number is 3700 for HADR communications, but verify the value. The target port number is only required when HADR is being initialized between two traditional Db2 instances. If you are connecting to a POD, this value is not required because the Db2 Shift program will generate it automatically for you.","title":"HADR ports"},{"location":"reference/#destination-pod-namespace-or-project","text":"Syntax: --dest-namespace=\"\" , --dest-project=\"\" In Kubernetes deployments, the location of a pod is associated with a namespace, while in OpenShift deployments, the pod is associated with a project. When authenticating to a Kubernetes or OpenShift environment, it is recommended that the local client be connected to the project or namespace that the Db2U pod is running in. If you do not supply a namespace or project value, the Db2 Shift program will assume that you are already connected to that project. If this is not the case, the program will stop with an error when it attempts to find the pod. To have Db2 Shift connect to the appropriate project or namespace, supply the value of the namespace or project using this option.","title":"Destination Pod Namespace or Project"},{"location":"reference/#clone-directory","text":"Syntax: --clone-dir=\"\" The cloned copy of the database will be placed into the directory that is specified by this field. When the database is cloned, the contents of the directory can be moved to a new location and the --mode=apply_clone option used to shift the contents of the clone into the Db2 database.","title":"Clone Directory"},{"location":"reference/#source-clone-directory","text":"Syntax: --local-dir=\"\" The cloned copy of the database will be retrieved or stored in this location depending on what type of copy operation is being performance.","title":"Source Clone Directory"},{"location":"reference/#target-clone-directory","text":"Syntax: --dest-dir=\"\" The cloned copy of the database will be placed into the target directory that is specified by this field. If you are pulling a copy ( --mode=pull_clone ), this field contains the cloned database that is going to move to the local directory.","title":"Target Clone Directory"},{"location":"reference/#synchronization-options","text":"Syntax: --sync=[start_sync, rerun_sync, finish_sync] The Db2 Shift program has two methods of moving the database to the destination. The traditional method is to take one pass at the database and move everything at once. During the finishing process, the program will briefly suspend the database (depending on settings) and perform a final refresh. This last step will pick up any database objects that may have changed over the course of the move. The total amount of time the database is suspended is directly related to how much information has changed during the shift process. In the event that you have large amount of changes, the final refresh may too long an outage. To minimize this outage, you can use the synchronization options provided. The default setting is do a complete shift operation without intermediate sync operations. To initialize the synchronization option, the first Db2 Shift command will use the sync option. Syntax: --sync=start_sync This initial step will instruct Db2 Shift to copy all of the required database objects to the target system. Once the copies are complete, the program will end processing and leave the target system in an incomplete state. During this process the source database is operational and it will not be suspended . When there is an appropriate moment, the database movement can be finalized with the finish_sync option. Syntax: --sync=finish_sync The finish_sync option will do one final pass against the source database and then it will finalize the database movement on the destination site. During the last pass the finish process will suspend the database to get a consistent database environment. Once this step completes, the destination database will be available. In the event that the source system has high update volumes, there may be a need to do multiple sync operations to minimize the finalize step. The Db2 Shift command will need to be told that it is syncing the database again, but not to start from scratch. The control files generated by the --sync=start_sync option will allow Db2 Shift to move database objects that are new or have changed since the initial synchronization request. The command to do the sync and only refresh the database objects requires the use of the rerun_sync option. Syntax: --sync=rerun_sync The rerun_sync option indicates to the Db2 Shift program to start syncing process to look for delta changes only. The --sync=rerun_sync process can be run repeatedly until the amount of changes between runs is minimized. When an appropriate timeslot is available, the shift can be finalized by using the finish_sync option. Syntax: --sync=finish_sync The finish_sync option will perform the final pass against the source database and complete the shift process as before. In summary, the standard shift operation will complete in one step (no --sync option is used). The --sync=start_sync option allows you to gradually move a database over time. For a gradual database shift, use the start_sync option on the first run. This will move an initial set of database files to the target. Then use the rerun_sync option on subsequent runs to copy any files that may have been added or changed to the database. When you are ready to finalize the shift, use the finish_sync option to gather any remaining files and complete the shift operation on the target system.","title":"Synchronization Options"},{"location":"reference/#metadata-generation","text":"Syntax: --blank-slate=[true|false] , --gen-settings , --verify-only The Db2 Shift command generates metadata that is used during the shift process. This metadata is key to determining which objects need to be moved from a source to destination as well as validating that the source can be successfully moved. Generating metadata requires access to the source and destination systems. If for some reason the connection to the source or destination is unavailable, the existing metadata files can still be used. In most cases you will not need to adjust these settings unless you have encountered a shift error.","title":"Metadata Generation"},{"location":"reference/#blank-slate","text":"Syntax: --blank-slate=true The --blank-slate option determines whether or not the existing metadata is refreshed. The default is value for --blank-slate is true which will display in the GUI as Refresh . The --blank-slate option will delete any existing metadata files and recreate them on your system during the shift operation. The default option is true which will result in new source and destination settings being generated. If you are importing settings files from other systems, or if you need to rerun the shift process without regenerating the files, use the --blank-slate=false option. When Db2 Shift executes it will use the existing metadata in the working directory and attempt to use those settings. Syntax: --blank-slate=false One scenario that involves the use of --blank-slate=false occurs when a shift operation fails at the target OC/Kubernetes pod because of a communication error. The database at the destination will be left in an inconsistent state and must be rebuilt by the shift process. The settings for the destination database can no longer be retrieved because the database cannot be started. Because of this reason, you must use the existing destination settings that were generated when you first ran the Db2 Shift command.","title":"Blank Slate"},{"location":"reference/#generate-settings","text":"Syntax: --blank-slate=true , --gen-settings The --gen-settings (Generate Settings) option is used in conjunction with --blank-slate . The use of --gen-settings will prevent Db2 Shift from continuing execution after the metadata files have been created.","title":"Generate Settings"},{"location":"reference/#verification","text":"Syntax: --verify-only The --verify-only option will generate the metadata files and check the connectivity and all settings and then stop execution. If --verify-only completes successfully, the Db2 Shift command will be able to execute the shift process.","title":"Verification"},{"location":"reference/#online-or-offline-move","text":"Syntax: --online , --offline Db2 Shift provides two options when dealing with the state of a database during the shift process: --online - database is online while the shift is taking place --offline - database has been shut down By default, the Db2 Shift command assumes you will use online mode and will suspend the database while it completes the last scan of the files. During this period, the database will not complete any insert, update, or delete transactions. This will result in a consistent database at the destination, but some transactions will not have been committed to the database. If the database at the destination must be identical to the source database, then you must completely shut down the database and choose the --offline option. During the last step of the shift process, Db2 Shift will search for any updates that may have been applied to the database after the initial copying was done. To ensure the integrity of the data being copied, the database will be placed into a WRITE SUSPEND mode. This last step should only take a few seconds and the database will be WRITE RESUMED when the final copy is done. When the database is suspended, all read activities will continue. New connections will not be permitted, but any applications that are currently running will be allowed to continue. Those transactions that are updating records will be temporarily \"paused\" while the copying is done. Once the copy is complete, a suspended application will finish their transaction. The period that the database is suspended or stopped is dependent on the changes that have occurred in the database from the time the shift operation started to the time when copying of the data is complete. The changes that have occurred during this period needs to be captured during the final step. It is during this step that the database must be suspended or stopped. During the initial scan the database will remain completely online and will not be impacted by the shift utility from a transaction perspective. However, since there is a large amount of disk reads taking place, it may impact buffer pool read performance. The offline mode must be used when shifting a database that requires a migration from an older release of Db2. This option must be specified when shifting Db2 versions 10.5 or 11.1. To use offline mode, you must run Db2 Shift against the source and target using: Shift command with --verify-only This step will generate a copy of the control files needed: Db2 Shift operation using the offline mode --offline If you do not create the control files beforehand, the Db2 Shift operation will not have the necessary control files to run the shift.","title":"Online or Offline Move"},{"location":"reference/#threading","text":"Syntax: --threads=[1..8] The copy phase of the Db2 Shift program is able to use multiple threads to transmit data to a destination. This settings allows you to increase the parallelism up to 8 threads. As you increase the number of threads, the amount of data being transmitted increases, at the expense of greater CPU usage and network congestion. The default value is 4 which strikes a balance between overhead and network performance.","title":"Threading"},{"location":"reference/#compression","text":"Syntax: --compression=[0..9] RSYNC compresses the data during the transfer process to allow for faster movement of data. The amount of compression can be adjusted from 0 to 9 with 0 turning off compression and values between 1 and 9 increasing the amount of compression applied to the data. Higher compression values will result in more CPU usage and may not significantly reduce the size of the datastream. A value of 4 has been found to be a good compromise between compression overhead and data size on slow networks (<1Gb/s). For high-speed networks, a value of 0 is recommended unless there is a requirement to reduce network traffic.","title":"Compression"},{"location":"reference/#stored-procedures-and-functions","text":"Syntax: --exclude-functions By default, the Db2 Shift command will automatically move all external stored procedures and functions that are found in the $HOME/sqllib/function path to the new destination. All SQLPL and PL/SQL routines are moved as part of the database move, so there is no migration required for those routines. Use the exclude flag to prevent any external functions being moved to the destination.","title":"Stored Procedures and Functions"},{"location":"reference/#overrides","text":"Syntax: --overrides=\"\" The overrides field is used to update INSTANCE settings at the target location. All database settings are moved during the shift process, but no INSTANCE settings are changed. If you need to change any INSTANCE settings, place the name of the parameter, following by the value on this line. Multiple parameters can be placed on the line by separating each parameter/value pair with a semi-colon ; .","title":"Overrides"},{"location":"scenarios/","text":"Shift Scenarios There are 8 scenarios covered in this section. Each scenario represents a typical use of the Db2 Shift program. The scenarios can be summarized as: Shift a Db2 database to OpenShift, Kubernetes or CP4D Shift a Db2 database to another Db2 instance Create a Cloned copy of the Db2 database for later deployment Deploy a clone into an OpenShift, Kubernetes or CP4D container Deploy a clone into another Db2 instance Initialize HADR between Source and Target POD Initialize HADR between Source and Target Instance Initialize DMC and LDAP Authentication for CP4D Copy Cloned Databases to a POD All scenarios assume that you are currently connected to the instance that has the Db2 database and have authenticated to OpenShift or Kubernetes before issuing the command. The following sections describe the different Db2 Shift scenarios and what settings are required to run each one. Each scenario includes information on what fields are required and those that are optional. More details on the settings are discussed in the chapters dedicated to these scenarios. Use this section to determine what settings are required before attempting to do a shift operation. Db2 Shift Command To invoke the Db2 shift command use the format ./db2shift if the program is installed in a local directory. If it is stored in the /bin directory then you can refer to it without the directory prefix db2shift . The program has three modes of operations: If the program is started without any parameters, it will go into full screen display mode and prompt you for the action you wish to take. You can use this prompt mode to generate any Db2 Shift command. If the --help option is used, the program will display a menu of help topics on the use of the Db2 Shift program. Otherwise, the Db2 Shift program will attempt to run the shift based on the settings provided. Db2 Containerization to OpenShift, Kubernetes, or CP4D Containerizing an existing Db2 database on an on-premise system to OpenShift, Kubernetes, or CP4D is the most common scenario for using Db2 Shift. In order to move a Db2 database to a POD you will require the following information: Source Database details Destination location Type of Containerization environment Shift Options The target of the Db2 Shift operation can be OpenShift, a Kubernetes cluster, or Cloud Pak for Data. More details can be found in the Db2 Containerization to OpenShift, Kubernetes, or CP4D section. Db2 Shift to another Db2 Instance This format of the Db2 Shift will take an existing Db2 database on an on-premise system, and shift it to another traditional Db2 system hosted on another on-premise server or cloud virtual machine. This does not containerize Db2! The Db2 Shift command requires the following information: Source Database details Destination location Shift Options The db2shift program assumes that you are currently connected to the instance that has the Db2 database and have ssh connectivity to the target server. More details can be found in the Db2 Shift to another Db2 Instance section. Clone an Existing Database The Db2 Shift clone option is used to take an existing Db2 database that is currently on-premise, and clone it into a directory. This cloned database can then be transported to another server and be deployed at that location. The advantage of cloning is that the destination does not need to be connected to the source location and the deployment of the clone can be done at a more convenient time. The Db2 Shift program requires the following information: Source Database details Clone Options The destination details are not required to clone a database. More details can be found in the Clone an Existing Database section. Clone Deployment to OpenShift, Kubernetes, or CP4D This Db2 Shift option will take a database clone and deploy it into a Db2u pod running on OpenShift, Kubernetes or CP4D. The panel requires the following information: Database name and clone location Destination POD details Type of Containerization environment Shift Options More details can be found in the Clone Deployment to OpenShift, Kubernetes, or CP4D section. Clone Deployment to Another Db2 Instance This Db2 Shift option will take a database clone and deploy it into another Db2 instance running natively (in any environment including Cloud VMs). The panel requires the following information: Database name and clone location Destination instance details Shift Options More details can be found in the Clone Deployment to Another Db2 Instance section. Initialize HADR between Source and Target POD This Db2 Shift option will take a source and destination (POD) database and start the HADR service between them. The Db2u pod must have been created with the following setting during the shift step. Note that a destination HADR port is not required since it is automatically generated for you by the Db2 Shift program. The panel requires the following information: The source database name and server The destination POD and server details More details can be found in the Initialize HADR between Source and Target POD section. Initialize HADR between Source and Target Instance This menu is similar to the previous one where the HADR service is setup between the source Db2 database and another Db2 instance. The Db2 database on the target system must have been created with one of the following settings during the shift step. The panel requires the following information: The source database name and server The destination server details More details can be found in the Initialize HADR between Source and Target Instance section. Initialize DMC and LDAP Authentication for CP4D When shifting a database to a CP4D platform or LDAP-secured environment, the Db2 Shift program will automatically add the appropriate userids to the LDAP service and reset the Data Management Console (DMC) so that it recognizes the database. If you choose to shift a database and set it up as an HADR secondary, the LDAP and DMC setup cannot be performed until after you have converted the secondary POD into the primary server. Only when the POD is the primary server can it be initialized to support LDAP and DMC services on IBM Cloud Pak for Data. More details can be found in the Initialize DMC and LDAP Authentication for CP4D section. Clone Copy This Db2 Shift command provides a feature that allows a user to copy an existing database clone copy to a POD, or to retrieve a database clone from a POD. Once a database clone has been generated, the copy can be moved to any location and then deployed locally. This option provides a convenient way of copying the database using Db2 Shift without having to use OpenShift or Kubernetes commands. The panel requires the following information: Type of copy (From Source to Target or Target to Source) Source cloned database directory Target cloned database directory The destination POD and server details More details can be found in the Clone Copy section.","title":"Scenario Overview"},{"location":"scenarios/#shift-scenarios","text":"There are 8 scenarios covered in this section. Each scenario represents a typical use of the Db2 Shift program. The scenarios can be summarized as: Shift a Db2 database to OpenShift, Kubernetes or CP4D Shift a Db2 database to another Db2 instance Create a Cloned copy of the Db2 database for later deployment Deploy a clone into an OpenShift, Kubernetes or CP4D container Deploy a clone into another Db2 instance Initialize HADR between Source and Target POD Initialize HADR between Source and Target Instance Initialize DMC and LDAP Authentication for CP4D Copy Cloned Databases to a POD All scenarios assume that you are currently connected to the instance that has the Db2 database and have authenticated to OpenShift or Kubernetes before issuing the command. The following sections describe the different Db2 Shift scenarios and what settings are required to run each one. Each scenario includes information on what fields are required and those that are optional. More details on the settings are discussed in the chapters dedicated to these scenarios. Use this section to determine what settings are required before attempting to do a shift operation.","title":"Shift Scenarios"},{"location":"scenarios/#db2-shift-command","text":"To invoke the Db2 shift command use the format ./db2shift if the program is installed in a local directory. If it is stored in the /bin directory then you can refer to it without the directory prefix db2shift . The program has three modes of operations: If the program is started without any parameters, it will go into full screen display mode and prompt you for the action you wish to take. You can use this prompt mode to generate any Db2 Shift command. If the --help option is used, the program will display a menu of help topics on the use of the Db2 Shift program. Otherwise, the Db2 Shift program will attempt to run the shift based on the settings provided.","title":"Db2 Shift Command"},{"location":"scenarios/#db2-containerization-to-openshift-kubernetes-or-cp4d","text":"Containerizing an existing Db2 database on an on-premise system to OpenShift, Kubernetes, or CP4D is the most common scenario for using Db2 Shift. In order to move a Db2 database to a POD you will require the following information: Source Database details Destination location Type of Containerization environment Shift Options The target of the Db2 Shift operation can be OpenShift, a Kubernetes cluster, or Cloud Pak for Data. More details can be found in the Db2 Containerization to OpenShift, Kubernetes, or CP4D section.","title":"Db2 Containerization to OpenShift, Kubernetes, or CP4D"},{"location":"scenarios/#db2-shift-to-another-db2-instance","text":"This format of the Db2 Shift will take an existing Db2 database on an on-premise system, and shift it to another traditional Db2 system hosted on another on-premise server or cloud virtual machine. This does not containerize Db2! The Db2 Shift command requires the following information: Source Database details Destination location Shift Options The db2shift program assumes that you are currently connected to the instance that has the Db2 database and have ssh connectivity to the target server. More details can be found in the Db2 Shift to another Db2 Instance section.","title":"Db2 Shift to another Db2 Instance"},{"location":"scenarios/#clone-an-existing-database","text":"The Db2 Shift clone option is used to take an existing Db2 database that is currently on-premise, and clone it into a directory. This cloned database can then be transported to another server and be deployed at that location. The advantage of cloning is that the destination does not need to be connected to the source location and the deployment of the clone can be done at a more convenient time. The Db2 Shift program requires the following information: Source Database details Clone Options The destination details are not required to clone a database. More details can be found in the Clone an Existing Database section.","title":"Clone an Existing Database"},{"location":"scenarios/#clone-deployment-to-openshift-kubernetes-or-cp4d","text":"This Db2 Shift option will take a database clone and deploy it into a Db2u pod running on OpenShift, Kubernetes or CP4D. The panel requires the following information: Database name and clone location Destination POD details Type of Containerization environment Shift Options More details can be found in the Clone Deployment to OpenShift, Kubernetes, or CP4D section.","title":"Clone Deployment to OpenShift, Kubernetes, or CP4D"},{"location":"scenarios/#clone-deployment-to-another-db2-instance","text":"This Db2 Shift option will take a database clone and deploy it into another Db2 instance running natively (in any environment including Cloud VMs). The panel requires the following information: Database name and clone location Destination instance details Shift Options More details can be found in the Clone Deployment to Another Db2 Instance section.","title":"Clone Deployment to Another Db2 Instance"},{"location":"scenarios/#initialize-hadr-between-source-and-target-pod","text":"This Db2 Shift option will take a source and destination (POD) database and start the HADR service between them. The Db2u pod must have been created with the following setting during the shift step. Note that a destination HADR port is not required since it is automatically generated for you by the Db2 Shift program. The panel requires the following information: The source database name and server The destination POD and server details More details can be found in the Initialize HADR between Source and Target POD section.","title":"Initialize HADR between Source and Target POD"},{"location":"scenarios/#initialize-hadr-between-source-and-target-instance","text":"This menu is similar to the previous one where the HADR service is setup between the source Db2 database and another Db2 instance. The Db2 database on the target system must have been created with one of the following settings during the shift step. The panel requires the following information: The source database name and server The destination server details More details can be found in the Initialize HADR between Source and Target Instance section.","title":"Initialize HADR between Source and Target Instance"},{"location":"scenarios/#initialize-dmc-and-ldap-authentication-for-cp4d","text":"When shifting a database to a CP4D platform or LDAP-secured environment, the Db2 Shift program will automatically add the appropriate userids to the LDAP service and reset the Data Management Console (DMC) so that it recognizes the database. If you choose to shift a database and set it up as an HADR secondary, the LDAP and DMC setup cannot be performed until after you have converted the secondary POD into the primary server. Only when the POD is the primary server can it be initialized to support LDAP and DMC services on IBM Cloud Pak for Data. More details can be found in the Initialize DMC and LDAP Authentication for CP4D section.","title":"Initialize DMC and LDAP Authentication for CP4D"},{"location":"scenarios/#clone-copy","text":"This Db2 Shift command provides a feature that allows a user to copy an existing database clone copy to a POD, or to retrieve a database clone from a POD. Once a database clone has been generated, the copy can be moved to any location and then deployed locally. This option provides a convenient way of copying the database using Db2 Shift without having to use OpenShift or Kubernetes commands. The panel requires the following information: Type of copy (From Source to Target or Target to Source) Source cloned database directory Target cloned database directory The destination POD and server details More details can be found in the Clone Copy section.","title":"Clone Copy"},{"location":"shiftinstance/","text":"Db2 Containerization to another Db2 Instance This format of the Db2 Shift will take an existing Db2 database on an on-premise system, and shift it to another traditional Db2 system hosted on another on-premise server or cloud virtual machine. This does not containerize Db2! The Db2 Shift command requires the following information: Source Database details Destination location Shift Options The db2shift program assumes that you are currently connected to the instance that has the Db2 database and have ssh connectivity to the target server. The syntax for running a direct shift from a Db2 database to a POD is: db2shift Required Options --mode=move --ssh --dest-type=OTHER --source-dbname=flights --source-owner=db2inst1 --dest-dbname=db2oltp --dest-server=db2inst1@some.server.com \\ Optional Settings --hadr --dest-create-db --online or --offline --threads=4 --compress-level=0 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability: Mode Option (Command Line Only) Syntax: --mode=move The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The only valid option is move when shifting a database between two Db2 instances. Target Client (Command Line Only) Syntax: --ssh The client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. If the target is a remote Db2 instance ( --ssh ), Db2 Shift expects that a passwordless ssh environment has been established between the source and target servers. Destination Type (Command Line Only) Syntax --dest-type=OTHER The destination is another instance (OTHER). This setting is only required when using the command line. It is automatically generated by the UI. Settings (Command Line and UI) Database Name (Source) Instance Owner Database Name (Destination) Force Database Creation Destination Owner Server Address Metadata Synchronization Options HADR Option Exclude Routines Database Mode Thread Count Compression Overrides","title":"Db2 Shift to Instance"},{"location":"shiftinstance/#db2-containerization-to-another-db2-instance","text":"This format of the Db2 Shift will take an existing Db2 database on an on-premise system, and shift it to another traditional Db2 system hosted on another on-premise server or cloud virtual machine. This does not containerize Db2! The Db2 Shift command requires the following information: Source Database details Destination location Shift Options The db2shift program assumes that you are currently connected to the instance that has the Db2 database and have ssh connectivity to the target server. The syntax for running a direct shift from a Db2 database to a POD is: db2shift Required Options --mode=move --ssh --dest-type=OTHER --source-dbname=flights --source-owner=db2inst1 --dest-dbname=db2oltp --dest-server=db2inst1@some.server.com \\ Optional Settings --hadr --dest-create-db --online or --offline --threads=4 --compress-level=0 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability:","title":"Db2 Containerization to another Db2 Instance"},{"location":"shiftinstance/#mode-option-command-line-only","text":"Syntax: --mode=move The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The only valid option is move when shifting a database between two Db2 instances.","title":"Mode Option (Command Line Only)"},{"location":"shiftinstance/#target-client-command-line-only","text":"Syntax: --ssh The client for a deploy (clone) operation must be supplied as part of the Db2 Shift command. If the target is a remote Db2 instance ( --ssh ), Db2 Shift expects that a passwordless ssh environment has been established between the source and target servers.","title":"Target Client (Command Line Only)"},{"location":"shiftinstance/#destination-type-command-line-only","text":"Syntax --dest-type=OTHER The destination is another instance (OTHER). This setting is only required when using the command line. It is automatically generated by the UI.","title":"Destination Type (Command Line Only)"},{"location":"shiftinstance/#settings-command-line-and-ui","text":"Database Name (Source) Instance Owner Database Name (Destination) Force Database Creation Destination Owner Server Address Metadata Synchronization Options HADR Option Exclude Routines Database Mode Thread Count Compression Overrides","title":"Settings (Command Line and UI)"},{"location":"shiftpod/","text":"Db2 Containerization to OpenShift, Kubernetes, or CP4D Containerizing an existing Db2 database on an on-premise system to OpenShift, Kubernetes, or CP4D is the most common scenario for using Db2 Shift. In order to move a Db2 database to a POD you will require the following information: Source Database details Destination location Type of Containerization environment Shift Options The target of the Db2 Shift operation can be OpenShift, a Kubernetes cluster, or Cloud Pak for Data system. The syntax for running a direct shift from a Db2 database to a POD is: db2shift Required Options --mode=[move | all] --dest-type=POD --oc or --kubectl --source-dbname=flights --source-owner=db2inst1 --dest-dbname=db2oltp --dest-server=c-demo-db2u-0 Optional Settings --dest-namespace=db2u --hadr --online or --offline --threads=4 --compress-level=0 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability: Mode Option (Command Line and UI) The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The following are the values that move can have. Move Database Only Syntax: --mode=move The MOVE option will take a copy of your Db2 database and copy it into the target Db2U container or instance. No other processing is done with the database. Move Database and Set up LDAP and DMC Settings (CP4D) Syntax: --mode=all If you choose the ALL option, the database will be moved and the program will also apply any security and console settings that are required. This is equivalent to running mode=move and mode=sec_and_monitor one after another. The ALL option is necessary in CP4D environments where the LDAP settings need to be updated and the DMC console needs to be reset to recognize the new database. Move Database for HADR Setup Syntax: --mode=move --hadr When HADR mode is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed. Destination Type (Command Line Only) Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI. Settings (Command Line and UI) Database Name (Source) Instance Owner Target Location (Pod) Database Name (Destination) POD Project POD Name Metadata Synchronization Options Exclude Routines Database Mode Thread Count Compression Overrides","title":"Db2 Shift to Pod"},{"location":"shiftpod/#db2-containerization-to-openshift-kubernetes-or-cp4d","text":"Containerizing an existing Db2 database on an on-premise system to OpenShift, Kubernetes, or CP4D is the most common scenario for using Db2 Shift. In order to move a Db2 database to a POD you will require the following information: Source Database details Destination location Type of Containerization environment Shift Options The target of the Db2 Shift operation can be OpenShift, a Kubernetes cluster, or Cloud Pak for Data system. The syntax for running a direct shift from a Db2 database to a POD is: db2shift Required Options --mode=[move | all] --dest-type=POD --oc or --kubectl --source-dbname=flights --source-owner=db2inst1 --dest-dbname=db2oltp --dest-server=c-demo-db2u-0 Optional Settings --dest-namespace=db2u --hadr --online or --offline --threads=4 --compress-level=0 --exclude-functions --sync=[start_sync, rerun_sync, finish_sync] --blank-slate=[true|false] --gen-settings --verify The panel that provides this capability:","title":"Db2 Containerization to OpenShift, Kubernetes, or CP4D"},{"location":"shiftpod/#mode-option-command-line-and-ui","text":"The MODE option determines what steps the Db2 Shift program will take to move your database to the new location. The following are the values that move can have.","title":"Mode Option (Command Line and UI)"},{"location":"shiftpod/#move-database-only","text":"Syntax: --mode=move The MOVE option will take a copy of your Db2 database and copy it into the target Db2U container or instance. No other processing is done with the database.","title":"Move Database Only"},{"location":"shiftpod/#move-database-and-set-up-ldap-and-dmc-settings-cp4d","text":"Syntax: --mode=all If you choose the ALL option, the database will be moved and the program will also apply any security and console settings that are required. This is equivalent to running mode=move and mode=sec_and_monitor one after another. The ALL option is necessary in CP4D environments where the LDAP settings need to be updated and the DMC console needs to be reset to recognize the new database.","title":"Move Database and Set up LDAP and DMC Settings (CP4D)"},{"location":"shiftpod/#move-database-for-hadr-setup","text":"Syntax: --mode=move --hadr When HADR mode is selected, the database will be copied over to the target location and initialized as an HADR secondary. The database can now be connected with the primary database as an HADR pair and participate in failover or readonly applications. This option cannot be used if your database needs to be migrated or if the database needs to be renamed.","title":"Move Database for HADR Setup"},{"location":"shiftpod/#destination-type-command-line-only","text":"Syntax --dest-type=POD The destination is a POD. This setting is only required when using the command line. It is automatically generated by the UI.","title":"Destination Type (Command Line Only)"},{"location":"shiftpod/#settings-command-line-and-ui","text":"Database Name (Source) Instance Owner Target Location (Pod) Database Name (Destination) POD Project POD Name Metadata Synchronization Options Exclude Routines Database Mode Thread Count Compression Overrides","title":"Settings (Command Line and UI)"},{"location":"support/","text":"Support For any questions regarding the Db2 Shift tool, including any suggestions, general comments, or bug reports, please contact: George Baklarz baklarz@ca.ibm.com Phil Downey phil.downey1@ibm.com We would also appreciate any feedback on the successful use of the tool. Thanks for using the Db2 Shift Program! Phil & George","title":"Support"},{"location":"support/#support","text":"For any questions regarding the Db2 Shift tool, including any suggestions, general comments, or bug reports, please contact: George Baklarz baklarz@ca.ibm.com Phil Downey phil.downey1@ibm.com We would also appreciate any feedback on the successful use of the tool. Thanks for using the Db2 Shift Program! Phil & George","title":"Support"},{"location":"syntax/","text":"Db2 Shift Syntax The Db2 Shift command has two modes of operation: Command Line mode - A set of parameters are passed to the program and executed Interactive mode - An interactive User Interface is used to supply the parameters required to execute a command The interactive mode provides the ability to generate all of the commands and includes the following additional features: Ability to save scripts for future use Compare source and destination target databases to check for compatibility Review Log files for any shift errors Extensive help information for input fields and Db2 Shift scenarios The interactive mode is invoked when the Db2 Shift command is executed with no parameters, or if either the following options are included on the command line: --help \u2013 Request detailed help information on running the Db2 Shift command --mono \u2013 Use a monochrome display format (White on Black) and non-Unicode character set when using the UI --accept \u2013 Accept license agreement (no license prompt) --version \u2013 Display Version information --shiftpod, --shiftdb2, --clone, --deploypod, --deploydb2, --hadrpod, --hadrdb2 \u2013 Direct link to the Db2 Shift scenario found on the main menu --logs \u2013 View logs from last shift execution Details of how to navigate the UI system are found in the User Inteface Overview section. Syntax Summary The following is a list of all options that are available with the Db2 Shift command: db2shift Operation --mode=[all,move,clone,apply_clone,sec_and_monitor,hadr_setup,push_clone,pull_clone] UI Mode Only --help --mono --accept Client --ssh,--local,--oc,--kubectl Source Details --source-database=\"sample\" --source-owner=\"db2inst1\" Destination Details --dest-database=\"bludb\" --dest-owner=\"db2inst1\" --dest-server=\"c-demo-db2u-0\" or \"userid@ip.address\" --dest-namespace=\"db2u\", --dest-project=\"db2u\" --overrides=\"instance_memory 3468896\" Clone and Copy Details --clone-dir=\"/tmp/clone\" --local-dir=\"/tmp/clone\" --dest-dir=\"/tmp/clone\" HADR Options --hadr --source-hadr-server=\"some.server.com\" --dest-hadr-server=\"other.server.com\" --source-hadr-port=3700 --dest-hadr-port=3700 Meta Data Generation --blank-slate=[True|False], --gen-settings --verify-only Synchronization Mode --sync=[start_sync, rerun_sync, finish_sync] Database Status --online, --offline Performance Options --threads=[1..8] --compression=[0..9] Function Library Support --exclude-functions Details for each one of these options can be found in the next section or by clicking on one of the following links. Mode Option Target Client Instance Target Client POD Source Database Source Owner Destination Database Destination Owner Destination Server POD Destination Server Instance Destination Pod Namespace or Project Clone Directory Local Directory Target Directory HADR Setup HADR Source or Destination Server HADR Ports Metadata Generation Synchronization Options Online/Offline Mode Threading Compression Stored Procedures Overrides","title":"Db2 Shift Syntax"},{"location":"syntax/#db2-shift-syntax","text":"The Db2 Shift command has two modes of operation: Command Line mode - A set of parameters are passed to the program and executed Interactive mode - An interactive User Interface is used to supply the parameters required to execute a command The interactive mode provides the ability to generate all of the commands and includes the following additional features: Ability to save scripts for future use Compare source and destination target databases to check for compatibility Review Log files for any shift errors Extensive help information for input fields and Db2 Shift scenarios The interactive mode is invoked when the Db2 Shift command is executed with no parameters, or if either the following options are included on the command line: --help \u2013 Request detailed help information on running the Db2 Shift command --mono \u2013 Use a monochrome display format (White on Black) and non-Unicode character set when using the UI --accept \u2013 Accept license agreement (no license prompt) --version \u2013 Display Version information --shiftpod, --shiftdb2, --clone, --deploypod, --deploydb2, --hadrpod, --hadrdb2 \u2013 Direct link to the Db2 Shift scenario found on the main menu --logs \u2013 View logs from last shift execution Details of how to navigate the UI system are found in the User Inteface Overview section.","title":"Db2 Shift Syntax"},{"location":"syntax/#syntax-summary","text":"The following is a list of all options that are available with the Db2 Shift command: db2shift Operation --mode=[all,move,clone,apply_clone,sec_and_monitor,hadr_setup,push_clone,pull_clone] UI Mode Only --help --mono --accept Client --ssh,--local,--oc,--kubectl Source Details --source-database=\"sample\" --source-owner=\"db2inst1\" Destination Details --dest-database=\"bludb\" --dest-owner=\"db2inst1\" --dest-server=\"c-demo-db2u-0\" or \"userid@ip.address\" --dest-namespace=\"db2u\", --dest-project=\"db2u\" --overrides=\"instance_memory 3468896\" Clone and Copy Details --clone-dir=\"/tmp/clone\" --local-dir=\"/tmp/clone\" --dest-dir=\"/tmp/clone\" HADR Options --hadr --source-hadr-server=\"some.server.com\" --dest-hadr-server=\"other.server.com\" --source-hadr-port=3700 --dest-hadr-port=3700 Meta Data Generation --blank-slate=[True|False], --gen-settings --verify-only Synchronization Mode --sync=[start_sync, rerun_sync, finish_sync] Database Status --online, --offline Performance Options --threads=[1..8] --compression=[0..9] Function Library Support --exclude-functions Details for each one of these options can be found in the next section or by clicking on one of the following links. Mode Option Target Client Instance Target Client POD Source Database Source Owner Destination Database Destination Owner Destination Server POD Destination Server Instance Destination Pod Namespace or Project Clone Directory Local Directory Target Directory HADR Setup HADR Source or Destination Server HADR Ports Metadata Generation Synchronization Options Online/Offline Mode Threading Compression Stored Procedures Overrides","title":"Syntax Summary"}]}